// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var IOServer, addToFeed, getFeed, iced, redis, socketio, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  socketio = require('socket.io');

  redis = require('./models/setup').db.redis;

  getFeed = function(accessToken, feedType, cb) {
    var err, feeds, neoUserId, requestFeedId, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "socketServer.coffee",
        funcname: "getFeed"
      });
      redis.get(accessToken, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return neoUserId = arguments[1];
          };
        })(),
        lineno: 6
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return cb(true, null);
      }
      requestFeedId = "user:" + neoUserId + ":" + feedType;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "socketServer.coffee",
          funcname: "getFeed"
        });
        redis.lrange(requestFeedId, 0, -1, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return feeds = arguments[1];
            };
          })(),
          lineno: 11
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return cb(true, null);
        }
        return cb(null, JSON.stringify(feeds));
      });
    });
  };

  addToFeed = function(accessToken, receiver, newFeed, feedType, cb) {
    var err, neoUserId, requestFeedId, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "socketServer.coffee",
        funcname: "addToFeed"
      });
      redis.get(accessToken, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return neoUserId = arguments[1];
          };
        })(),
        lineno: 17
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return cb(true, null);
      }
      if (!neoUserId) {
        return cb(true, null);
      }
      requestFeedId = "user:" + neoUserId + ":" + feedType;
      return redis.lpush(requestFeedId, JSON.stringify(newFeed), function(err, result) {});
    });
  };

  module.exports = IOServer = (function() {
    var instance;

    instance = null;

    function IOServer(server) {
      var io;
      if (instance) {
        return instance;
      } else {
        io = socketio.listen(server);
        io.sockets.on('connection', function(socket) {
          socket.emit('ack', {});
          socket.on('request feed', function(data) {
            var err, requestFeeds, ___iced_passed_deferral, __iced_deferrals, __iced_k,
              _this = this;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "socketServer.coffee"
              });
              getFeed(data.accessToken, "requestFeed", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return requestFeeds = arguments[1];
                  };
                })(),
                lineno: 44
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return socket.emit('request feed', JSON.stringify(requestFeeds));
            });
          });
          socket.on('post request feed', function(data) {
            var accessToken, receiver, requestFeed;
            receiver = data.recv;
            requestFeed = RequestFeed.fillMetaData(RequestFeed.deserialize(data.requestFeed));
            accessToken = data.accessToken;
            return addToFeed(accessToken, receiver, requestFeed, "requestFeed", function() {});
          });
          socket.on('recommendation feed', function(data) {
            var err, recommendationFeeds, ___iced_passed_deferral, __iced_deferrals, __iced_k,
              _this = this;
            __iced_k = __iced_k_noop;
            ___iced_passed_deferral = iced.findDeferral(arguments);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "socketServer.coffee"
              });
              getFeed(data.accessToken, "recommendationFeed", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return recommendationFeeds = arguments[1];
                  };
                })(),
                lineno: 58
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return socket.emit('request feed', JSON.stringify(recommendationFeeds));
            });
          });
          return socket.on('post recommendation feed', function(data) {
            var accessToken, receiver, requestFeed;
            receiver = data.recv;
            requestFeed = RecommendationFeed.fillMetaData(RecommendationFeed.deserialize(data.requestFeed));
            accessToken = data.accessToken;
            return addToFeed(accessToken, receiver, requestFeed, "recommendationFeed", function() {});
          });
        });
        instance = io;
      }
    }

    return IOServer;

  })();

}).call(this);
