// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var api, apiVersion, app, assert, chai, should, supertest;



  supertest = require('supertest');

  chai = require('chai');

  should = chai.should();

  assert = chai.assert;

  app = require('../app').app;

  api = supertest(app);

  apiVersion = app.version;

  describe('Entity', function() {
    var newAttributeId, newEntityId;
    newEntityId = null;
    newAttributeId = null;
    it('should return 404 when entity does not exist', function(done) {
      return api.get("" + apiVersion + "/entity/xyz").expect(400).expect({
        error: "Missing param id"
      }, done);
    });
    it('should return 201 when adding new entity', function(done) {
      return api.post("" + apiVersion + "/entity/").send({
        name: "TEST_Mocha"
      }).end(function(err, res) {
        var response;
        response = JSON.parse(res.text);
        assert.isNumber(response.id);
        newEntityId = response.id;
        return done();
      });
    });
    it('should return 200 when getting existing entity', function(done) {
      return api.get("" + apiVersion + "/entity/" + newEntityId).expect(200, done);
    });
    it('should return 200 when updating existing entity', function(done) {
      return api.put("" + apiVersion + "/entity/" + newEntityId).send({
        name: "TEST_Attribute",
        version: 1
      }).end(function(err, res) {
        var response;
        response = JSON.parse(res.text);
        assert.equal(response.version, 2);
        return done();
      });
    });
    it('should return 200 when adding new attribute to entity', function(done) {
      return api.post("" + apiVersion + "/entity/" + newEntityId + "/attribute").send({
        name: "TEST_Attribute"
      }).end(function(err, res) {
        var response;
        response = JSON.parse(res.text);
        assert.isNumber(response.id);
        newAttributeId = response.id;
        return done();
      });
    });
    return it('should return 200 when getting entity attribute', function(done) {
      return api.get("" + apiVersion + "/entity/" + newEntityId + "/attribute").end(function(err, res) {
        var response;
        response = JSON.parse(res.text);
        assert.isNotNull(response);
        return done();
      });
    });
  });

}).call(this);
