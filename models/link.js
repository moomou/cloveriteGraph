// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Contants, INDEX_NAME, Indexes, Link, LinkSchema, Neo, Setup, StdSchema, db, redis, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  Setup = require('./setup');

  Neo = require('./neo');

  redis = Setup.db.redis;

  db = Setup.db;

  StdSchema = require('./stdSchema');

  Contants = StdSchema.Contants;

  INDEX_NAME = 'rLink';

  Indexes = [
    {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'startend',
      INDEX_VALUE: ''
    }, {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'srcURL',
      INDEX_VALUE: ''
    }
  ];

  LinkSchema = {
    srcURL: '',
    description: '',
    value: '',
    veracity: 0,
    startend: ''
  };

  module.exports = Link = (function(_super) {
    __extends(Link, _super);

    function Link(_node) {
      this._node = _node;
      Link.__super__.constructor.call(this, this._node);
    }

    return Link;

  })(Neo);

  /*
  Static Method
  */


  Link.Name = 'rLink';

  Link.INDEX_NAME = INDEX_NAME;

  Link.normalizeName = function(name) {
    return "_" + (name.toUpperCase());
  };

  Link.cleanData = function(data) {
    var validKeys;
    validKeys = _und.keys(LinkSchema);
    _und.defaults(data, LinkSchema);
    return data;
  };

  Link.index = function(rel, reqBody, cb) {
    if (cb == null) {
      cb = null;
    }
    return Neo.index(rel, Indexes, reqBody, cb);
  };

  Link.find = function(key, value, cb) {
    return Neo.findRel(Link, Link.INDEX_NAME, key, value, cb);
  };

}).call(this);

/*
//@ sourceMappingURL=link.map
*/
