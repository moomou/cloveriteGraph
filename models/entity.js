// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Entity, INDEX_KEY, INDEX_NAME, INDEX_VAL, REL_ATTRIBUTE, REL_AWARD, REL_CHILD, REL_CONTAINER, REL_LOCATION, REL_PARENT, REL_RESOURCE, db, neo4j;



  neo4j = require('neo4j');

  db = {
    neo: new neo4j.GraphDatabase(process.env.NEO4J_URL || 'http://localhost:7474')
  };

  INDEX_NAME = 'node';

  INDEX_KEY = 'type';

  INDEX_VAL = 'entity';

  REL_LOCATION = '_location';

  REL_AWARD = '_award';

  REL_ATTRIBUTE = '_attribute';

  REL_PARENT = '_parent';

  REL_CHILD = '_child';

  REL_CONTAINER = '_container';

  REL_RESOURCE = '_resource';

  module.exports = Entity = (function() {
    function Entity(_node) {
      this._node = _node;
    }

    return Entity;

  })();

  Entity.prototype._getAttribute = function(callback) {
    var params, query;
    query = ['START user=node({userId})', 'MATCH (user)<-[:REL_ATTRIBUTE]-(attributes)', 'RETURN attributes, count(attributes)'].join('\n').replace('REL_ATTRIBUTE', REL_ATTRIBUTE);
    params = {
      userId: this.id
    };
    return db.neo.query(query, params, function(err, res) {
      if (err) {
        return callback(err);
      }
      return callback(null, res[0]);
    });
  };

  Entity.prototype.save = function(callback) {
    return this._node.save(function(err) {
      return callback(err);
    });
  };

  Entity.prototype.del = function(callback) {
    return this._node.del(function(err) {
      return callback(err, true);
    });
  };

  Entity.prototype.vote = function(attrId, vote, callback) {};

  Entity.prototype.linkEntity = function(other, relation, callback) {
    return this.__node.createRelationshipTo(other, relation.name, relation.data, function(err, res) {
      if (err) {
        return callback(err);
      }
      return res.save(function(err) {
        if (err) {
          return callback(err);
        }
      });
    });
  };

  Entity.prototype.unlinkEntity = function(other, relation, callback) {
    return this._node.getRelationships(relation, function(err, rels) {
      var i, reToOther, rel, _i, _j, _len, _len1, _results;
      if (err) {
        return callback(err);
      }
      reToOther = [];
      for (i = _i = 0, _len = rels.length; _i < _len; i = ++_i) {
        rel = rels[i];
        if (rel.end === other) {
          reToOther.push(rel);
        }
      }
      _results = [];
      for (_j = 0, _len1 = reToOther.length; _j < _len1; _j++) {
        rel = reToOther[_j];
        _results.push((function(rel) {
          return rel.del(function(err) {
            if (err) {
              return callback(err);
            }
          });
        })(rel));
      }
      return _results;
    });
  };

  Entity.create = function(data, callback) {
    var entity, node;
    console.log(db);
    node = db.neo.createNode(data);
    entity = new Entity(node);
    return node.save(function(err) {
      if (err) {
        callback(err);
      }
      return node.index(INDEX_NAME, INDEX_KEY, INDEX_VAL, function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, entity);
      });
    });
  };

  Entity.get = function(id, callback) {
    return db.neo.getNodeById(id, function(err, node) {
      if (err) {
        return callback(err);
      }
      return callback(null, node);
    });
  };

}).call(this);
