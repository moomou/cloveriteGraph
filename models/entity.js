// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Entity, EntitySchema, INDEX_KEY, INDEX_NAME, INDEX_VAL, Meta, Neo, REL_ATTRIBUTE, REL_AWARD, REL_CHILD, REL_CONTAINER, REL_LOCATION, REL_PARENT, REL_RESOURCE, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  Neo = require('./neo');

  Meta = require('./meta');

  INDEX_NAME = 'node';

  INDEX_KEY = 'type';

  INDEX_VAL = 'entity';

  REL_LOCATION = '_location';

  REL_AWARD = '_award';

  REL_ATTRIBUTE = '_attribute';

  REL_PARENT = '_parent';

  REL_CHILD = '_child';

  REL_CONTAINER = '_container';

  REL_RESOURCE = '_resource';

  EntitySchema = {
    "name": "Name of entity",
    "type": "",
    "tags": [""],
    "version": 0,
    "private": false
  };

  module.exports = Entity = (function(_super) {
    __extends(Entity, _super);

    function Entity(_node) {
      this._node = _node;
      Entity.__super__.constructor.call(this, this._node);
    }

    Entity.prototype.vote = function(attr, vote, cb) {};

    Entity.prototype.unlinkEntity = function(other, relation, cb) {
      return this._node.getRelationships(relation, function(err, rels) {
        var i, reToOther, rel, _i, _j, _len, _len1, _results;
        if (err) {
          return cb(err);
        }
        reToOther = [];
        for (i = _i = 0, _len = rels.length; _i < _len; i = ++_i) {
          rel = rels[i];
          if (rel.end === other) {
            reToOther.push(rel);
          }
        }
        _results = [];
        for (_j = 0, _len1 = reToOther.length; _j < _len1; _j++) {
          rel = reToOther[_j];
          _results.push((function(rel) {
            return rel.del(function(err) {
              if (err) {
                return cb(err);
              }
            });
          })(rel));
        }
        return _results;
      });
    };

    Entity.prototype.getAttribute = function(cb) {
      var params, query;
      query = ['START user=node({userId})', 'MATCH (user)<-[:REL_ATTRIBUTE]-(attributes)', 'RETURN attributes, count(attributes)'].join('\n').replace('REL_ATTRIBUTE', REL_ATTRIBUTE);
      params = {
        userId: this.id
      };
      return Neo.query(Entity, query, params, cb);
    };

    return Entity;

  })(Neo);

  /*
  Static Method
  */


  Entity.deserialize = function(data) {
    _und.defaults(data, EntitySchema);
    return data;
  };

  Entity.create = function(reqBody, cb) {
    var index;
    index = {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: INDEX_KEY,
      INDEX_VAL: INDEX_VAL
    };
    return Neo.create(Entity, reqBody, index, cb);
  };

  Entity.get = function(id, cb) {
    return Neo.get(Entity, id, cb);
  };

  Entity.put = function(nodeId, reqBody, cb) {
    return Neo.put(Entity, nodeId, reqBody, cb);
  };

}).call(this);
