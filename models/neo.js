// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var MetaSchema, Neo, Setup, db, iced, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  Setup = require('./setup');

  db = Setup.db;

  /*
  #Normal values related to transaction; 
  #Permission not implemented here
  */


  MetaSchema = {
    createdAt: -1,
    modifiedAt: -1,
    "private": false,
    version: 0
  };

  module.exports = Neo = (function() {
    function Neo(_node) {
      this._node = _node;
    }

    Neo.prototype.serialize = function(cb, extraData) {
      var data;
      if (extraData == null) {
        extraData = {};
      }
      data = this._node.data;
      _und.extend(data, {
        id: this._node.id
      }, extraData);
      if (cb) {
        return cb(data);
      }
      return data;
    };

    Neo.prototype.update = function(newData) {
      if (newData.version !== this._node.data.version) {
        return false;
      }
      _und.extend(this._node.data, newData);
      return true;
    };

    Neo.prototype.save = function(cb) {
      this._node.data.modifiedAt = new Date().getTime() / 1000;
      if (this._node.data.createdAt < 0) {
        this._node.data.createdAt = new Date().getTime() / 1000;
      }
      this._node.data.version += 1;
      return this._node.save(function(err) {
        return cb(err);
      });
    };

    Neo.prototype.del = function(cb) {
      return this._node.del(function(err) {
        return cb(err, true);
      });
    };

    return Neo;

  })();

  Neo.fillIndex = function(indexes, data) {
    var result;
    result = _und.clone(indexes);
    _und.map(result, function(index) {
      return index['INDEX_VALUE'] = data[index['INDEX_KEY']];
    });
    return result;
  };

  Neo.deserialize = function(ClassSchema, data) {
    var validKeys;
    validKeys = _und.keys(ClassSchema);
    _und.defaults(data, ClassSchema);
    return _und.pick(data, validKeys);
  };

  Neo.create = function(Class, reqBody, indexes, cb) {
    var data, err, i, ind, index, node, obj, saveErr, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    data = Class.deserialize(reqBody);
    _und.extend(data, MetaSchema);
    node = db.neo.createNode(data);
    obj = new Class(node);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "neo.coffee",
        funcname: "create"
      });
      obj.save(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return saveErr = arguments[0];
          };
        })(),
        lineno: 64
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (saveErr) {
        return cb(saveErr, null);
      }
      (function(__iced_k) {
        var _i, _len, _ref;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "neo.coffee",
          funcname: "create"
        });
        _ref = Neo.fillIndex(indexes, reqBody);
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          index = _ref[i];
          node.index(index.INDEX_NAME, index.INDEX_KEY, index.INDEX_VALUE, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return ind = arguments[1];
              };
            })(),
            lineno: 72
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return cb(indexErr, null);
        }
        console.log("CREATED: " + Class.Name);
        return cb(null, obj);
      });
    });
  };

  Neo.get = function(Class, id, cb) {
    return db.neo.getNodeById(id, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, new Class(node));
    });
  };

  Neo.put = function(Class, nodeId, reqBody, cb) {
    return Class.get(nodeId, function(err, obj) {
      var saveErr, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (err) {
        return cb(err, null);
      }
      valid = obj.update(reqBody);
      (function(__iced_k) {
        if (valid) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "neo.coffee"
            });
            obj.save(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return saveErr = arguments[0];
                };
              })(),
              lineno: 92
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        if (saveErr) {
          return cb(saveErr, null);
        }
        return cb(null, obj);
      });
    });
  };

  Neo.find = function(Class, indexName, key, value, cb) {
    return db.neo.getIndexedNode(indexName, key, value, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      if (node) {
        return cb(null, new Class(node));
      }
      return cb(null, null);
    });
  };

  Neo.getOrCreate = function(Class, reqBody, cb) {
    var err, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (reqBody['id']) {
      return Class.get(reqBody['id'], cb);
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "neo.coffee",
        funcname: "getOrCreate"
      });
      Neo.find(Class, Class.INDEX_NAME, 'name', reqBody['name'], __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return obj = arguments[1];
          };
        })(),
        lineno: 116
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (obj) {
        console.log(Class.Name + ": " + reqBody.toString());
        if (obj) {
          return cb(null, obj);
        }
      }
      return Class.create(reqBody, cb);
    });
  };

  Neo.query = function(Class, query, params, cb) {
    return db.neo.query(query, params, function(err, res) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, res);
    });
  };

  Neo.search = function(Class, indexName, query, cb) {
    return db.neo.queryNodeIndex(indexName, query, function(err, nodes) {
      if (err) {
        cb(err);
      }
      return cb(null, _und.map(nodes, function(node) {
        return new Class(node);
      }));
    });
  };

  Neo.createLink = function(srcNode, destNode, linkName, linkData, cb) {};

}).call(this);

/*
//@ sourceMappingURL=neo.map
*/
