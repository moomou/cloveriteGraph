// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Logger, MetaSchema, Neo, Setup, ToOmitKeys, db, iced, trim, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  trim = require('../misc/stringUtil').trim;

  Logger = require('util');

  Setup = require('./setup');

  db = Setup.db;


  /*
  # Normal values related to transaction;
  # Permission not implemented here
  */

  MetaSchema = {
    createdAt: -1,
    modifiedAt: -1,
    "private": false,
    version: 0,
    nodeType: ''
  };

  ToOmitKeys = ['id', 'createdAt', 'modifiedAt', 'version', 'nodeType'];

  module.exports = Neo = (function() {
    function Neo(_node) {
      this._node = _node;
    }

    Neo.prototype.serialize = function(cb, extraData) {
      var data;
      console.log("Serializing");
      if (extraData == null) {
        extraData = {};
      }
      data = this._node.data;
      _und.extend(data, {
        id: this._node.id
      }, extraData);
      if (cb) {
        return cb(data);
      }
      return data;
    };

    Neo.prototype.update = function(newData) {
      console.log("Current Data VER: " + this._node.data.version);
      console.log("Input Data VER: " + newData.version);
      if (newData.version !== this._node.data.version) {
        return "Version number incorrect";
      }
      if (!this._node.data["private"] && newData["private"]) {
        return "Cannot take a public entity and set it to private";
      }
      _und.extend(this._node.data, newData);
      return false;
    };

    Neo.prototype.save = function(cb) {
      if (cb == null) {
        cb = function() {};
      }
      this._node.data.modifiedAt = new Date().getTime() / 1000;
      if (this._node.data.createdAt < 0) {
        this._node.data.createdAt = new Date().getTime() / 1000;
      }
      this._node.data.version += 1;
      return this._node.save(function(err) {
        return cb(err);
      });
    };

    Neo.prototype.del = function(cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this._node["delete"](cb, true);
    };

    return Neo;

  })();

  Neo.MetaSchema = MetaSchema;

  Neo.fillMetaData = function(data) {
    var cData;
    cData = _und.clone(data);
    _und.extend(cData, MetaSchema);
    cData.createdAt = cData.modifiedAt = new Date().getTime() / 1000;
    cData.version += 1;
    return cData;
  };

  Neo.fillIndex = function(indexes, data) {
    var result;
    result = _und.clone(indexes);
    _und.map(result, function(index) {
      return index['INDEX_VALUE'] = encodeURIComponent(trim(data[index['INDEX_KEY']]));
    });
    return _und.filter(result, function(index) {
      return !_und.isUndefined(index['INDEX_VALUE']);
    });
  };

  Neo.deserialize = function(ClassSchema, data) {
    var validKeys;
    data = _und.clone(data);
    validKeys = ['id', 'version', 'private'];
    validKeys = _und.union(_und.keys(ClassSchema), validKeys);
    _und.defaults(data, ClassSchema);
    return _und.pick(data, validKeys);
  };

  Neo.index = function(node, indexes, reqBody, cb) {
    var i, index, _i, _len, _ref, _results;
    if (cb == null) {
      cb = null;
    }
    console.log("~~~Indexing~~~");
    console.log(reqBody);
    _ref = Neo.fillIndex(indexes, reqBody);
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      index = _ref[i];
      console.log(index);
      _results.push(node.index(index.INDEX_NAME, index.INDEX_KEY, index.INDEX_VALUE, function(err, ind) {
        if (cb && err) {
          cb(err, null);
        }
        if (cb) {
          return cb(null, ind);
        }
      }));
    }
    return _results;
  };

  Neo.create = function(Class, reqBody, indexes, cb) {
    var data, node, obj, saveErr, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    data = Class.deserialize(reqBody);
    data = _und.omit(data, ToOmitKeys);
    _und.defaults(data, MetaSchema);
    node = db.neo.createNode(data);
    obj = new Class(node);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "neo.coffee",
        funcname: "create"
      });
      obj.save(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return saveErr = arguments[0];
          };
        })(),
        lineno: 125
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (saveErr) {
        return cb(saveErr, null);
      }
      console.log("Starting to index");
      Neo.index(node, Class.Indexes, obj.serialize());
      console.log("CREATED: " + Class.Name);
      return cb(null, obj);
    });
  };

  Neo.getRel = function(Class, id, cb) {
    return db.neo.getRelationshipById(id, function(err, rel) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, new Class(rel));
    });
  };

  Neo.get = function(Class, id, cb) {
    return db.neo.getNodeById(id, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, new Class(node));
    });
  };

  Neo.put = function(Class, nodeId, reqBody, cb) {
    var data;
    data = Class.deserialize(reqBody);
    console.log("ID: " + nodeId);
    return Class.get(nodeId, function(err, obj) {
      var errMsg, saveErr, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (err) {
        return cb({
          dbError: err
        }, null);
      }
      errMsg = obj.update(data);
      if (!errMsg) {
        console.log("Saving...");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "neo.coffee"
          });
          obj.save(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return saveErr = arguments[0];
              };
            })(),
            lineno: 156
          }));
          __iced_deferrals._fulfill();
        })(function() {
          Neo.index(obj._node, Class.Indexes, obj.serialize());
          if (saveErr) {
            return cb(saveErr, null);
          }
          return cb(null, obj);
          return __iced_k();
        });
      } else {
        console.log("Failed");
        return cb({
          validationError: errMsg
        }, obj);
        return __iced_k();
      }
    });
  };

  Neo.putRel = function(Class, relId, reqBody, cb) {
    var data;
    data = Class.deserialize(reqBody);
    return Class.get(relId, function(err, obj) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (err) {
        return cb(err, null);
      }
      obj._node.data = data;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "neo.coffee"
        });
        obj._node.save(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 170
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!err) {
          Neo.index(obj._node, Class.Indexes, obj.serialize());
          return cb(null, obj);
        } else {
          console.log("Failed");
          return cb(err, obj);
        }
      });
    });
  };

  Neo.findRel = function(Class, indexName, key, value, cb) {
    return db.neo.getIndexedRelationship(indexName, key, value, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      if (node) {
        return cb(null, new Class(node));
      }
      return cb(null, null);
    });
  };

  Neo.find = function(Class, indexName, key, value, cb) {
    Logger.debug("Neo Find Index: " + indexName);
    Logger.debug("Neo Find Key: " + key);
    Logger.debug("Neo Find Key: " + value);
    return db.neo.getIndexedNode(indexName, key, value, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      if (node) {
        return cb(null, new Class(node));
      }
      return cb(null, null);
    });
  };

  Neo.getOrCreate = function(Class, reqBody, cb) {
    var err, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (reqBody['id']) {
      return Class.get(reqBody['id'], cb);
    }
    Logger.debug('Neo Get or Create');
    Logger.debug(Class);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "neo.coffee",
        funcname: "getOrCreate"
      });
      Neo.find(Class, Class.INDEX_NAME, 'name', reqBody['name'], __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return obj = arguments[1];
          };
        })(),
        lineno: 213
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (obj) {
        Logger.debug("Neo Find Returned " + Class.Name + ": " + reqBody.toString());
        if (obj) {
          return cb(null, obj);
        }
      }
      return Class.create(reqBody, cb);
    });
  };


  /* Node Specific*/

  Neo.query = function(Class, query, params, cb) {
    return db.neo.query(query, params, function(err, res) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, res);
    });
  };

  Neo.search = function(Class, indexName, query, cb) {
    return db.neo.queryNodeIndex(indexName, query, function(err, nodes) {
      if (err) {
        cb(err);
      }
      return cb(null, _und.map(nodes, function(node) {
        return new Class(node);
      }));
    });
  };

}).call(this);
