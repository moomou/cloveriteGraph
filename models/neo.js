// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Neo, db, neo4j, _und;



  _und = require('underscore');

  neo4j = require('neo4j');

  db = {
    neo: new neo4j.GraphDatabase(process.env.NEO4J_URL || 'http://localhost:7474')
  };

  module.exports = Neo = (function() {
    function Neo(_node) {
      this._node = _node;
    }

    Neo.prototype.serialize = function() {
      var data;
      data = this._node.data;
      _und.extend(data, {
        id: this._node.id
      });
      return data;
    };

    Neo.prototype.update = function(newData) {
      if (newData.version !== this._node.data.version) {
        return false;
      }
      _und.extend(this._node.data, newData);
      return true;
    };

    Neo.prototype.save = function(cb) {
      return this._node.save(function(err) {
        return cb(err);
      });
    };

    Neo.prototype.del = function(cb) {
      return this._node.del(function(err) {
        return cb(err, true);
      });
    };

    return Neo;

  })();

  Neo.create = function(Class, reqBody, index, cb) {
    var data, node, obj;
    data = Class.deserialize(reqBody);
    node = db.neo.createNode(data);
    obj = new Class(node);
    return node.save(function(err) {
      if (err) {
        return cb(err, null);
      }
      return node.index(index.INDEX_NAME, index.INDEX_KEY, index.INDEX_VAL, function(err) {
        if (err) {
          return cb(err, null);
        }
        return cb(null, obj);
      });
    });
  };

  Neo.get = function(Class, id, cb) {
    return db.neo.getNodeById(id, function(err, node) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, new Class(node));
    });
  };

  Neo.put = function(Class, nodeId, reqBody, cb) {
    return Neo.get(Class, nodeId, function(err, obj) {
      var valid;
      if (err) {
        return cb(err, null);
      }
      valid = obj.update(reqBody);
      if (valid) {
        obj.save(function(err) {
          if (err) {
            return cb(err, null);
          }
          return cb(null, obj);
        });
      }
      return cb(err, null);
    });
  };

  Neo.query = function(Class, query, params, cb) {
    return db.neo.query(query, params, function(err, res) {
      if (err) {
        return cb(err, null);
      }
      return cb(null, res);
    });
  };

  Neo.createLink = function(srcNode, destNode, linkName, linkData, cb) {};

}).call(this);
