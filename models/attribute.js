// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Attribute, AttributeSchema, INDEX_KEY, INDEX_NAME, INDEX_VAL, Meta, Neo, REL_RESOURCE, Setup, redis, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  Setup = require('./setup');

  Neo = require('./neo');

  Meta = require('./meta');

  redis = Setup.db.redis;

  INDEX_NAME = 'node';

  INDEX_KEY = 'type';

  INDEX_VAL = 'attribute';

  REL_RESOURCE = '_resource';

  AttributeSchema = {
    name: 'Name of attribute',
    type: '',
    tags: [''],
    version: 0,
    "private": false
  };

  module.exports = Attribute = (function(_super) {
    __extends(Attribute, _super);

    function Attribute(_node) {
      this._node = _node;
      Attribute.__super__.constructor.call(this, this._node);
    }

    return Attribute;

  })(Neo);

  /*
  Static Method
  */


  Attribute.deserialize = function(data) {
    _und.defaults(data, AttributeSchema);
    return data;
  };

  Attribute.create = function(reqBody, cb) {
    var index;
    index = {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: INDEX_KEY,
      INDEX_VAL: INDEX_VAL
    };
    return Neo.create(Attribute, reqBody, index, cb);
  };

  Attribute.get = function(id, cb) {
    return Neo.get(Attribute, id, cb);
  };

  Attribute.getOrCreate = function(reqBody, cb) {
    if (reqBody['id']) {
      return Attribute.get(reqBody['id'], cb);
    } else {
      return Attribute.create(reqBody, cb);
    }
  };

  Attribute.put = function(nodeId, reqBody, cb) {
    return Neo.put(Attribute, nodeId, reqBody, cb);
  };

}).call(this);
