// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var INDEX_NAME, Indexes, Logger, Neo, Setup, User, UserSchema, redis, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  Logger = require('util');

  Neo = require('./neo');

  Setup = require('./setup');

  redis = Setup.db.redis;

  INDEX_NAME = 'nUser';

  Indexes = [
    {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'reputation',
      INDEX_VALUE: ''
    }
  ];

  UserSchema = {
    createdCount: 0,
    modifiedCount: 0,
    reputation: 'Z'
  };

  module.exports = User = (function(_super) {
    __extends(User, _super);

    function User(_node) {
      this._node = _node;
      User.__super__.constructor.call(this, this._node);
    }

    return User;

  })(Neo);

  User.Name = 'nUser';

  User.INDEX_NAME = INDEX_NAME;

  User.Indexes = Indexes;

  User.deserialize = function(data) {
    return Neo.deserialize(UserSchema, data);
  };

  User.create = function(cb) {
    return Neo.create(User, UserSchema, Indexes, cb);
  };

  User.get = function(id, cb) {
    return Neo.get(User, id, cb);
  };

  User.getOrCreate = function(reqBody, cb) {
    throw "Not Implemented";
  };

  User.put = function(nodeId, reqBody, cb) {
    return Neo.put(User, nodeId, reqBody, cb);
  };

}).call(this);
