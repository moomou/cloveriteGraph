// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Cypher, CypherBuilder, CypherLinkUtil, Data, DataRoute, Entity, EntityUtil, ErrorDevMessage, Link, Logger, Neo, NumUtil, Permission, Remote, Response, Slug, Tag, User, Vote, basicAuthentication, getDiscussionId, getRelationId, hasPermission, iced, redis, __iced_k, __iced_k_noop, _addAttribute, _addData, _del, _delAttribute, _delData, _edit, _getAttribute, _getData, _listAttribute, _listData, _show, _showUserVoteDetail, _showUsers, _und, _updateAttributeLink;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  redis = require('../models/setup').db.redis;

  Logger = require('util');

  Remote = require('../remote/remote');

  Neo = require('../models/neo');

  User = require('../models/user');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Data = require('../models/data');

  Tag = require('../models/tag');

  Vote = require('../models/vote');

  Link = require('../models/link');

  Constants = require('../config').Constants;

  Slug = require('../util/slug');

  NumUtil = require('../util/numUtil');

  EntityUtil = require('./entity/util');

  DataRoute = require('./data');

  Cypher = require('./util/cypher');

  CypherBuilder = Cypher.CypherBuilder;

  CypherLinkUtil = Cypher.CypherLinkUtil;

  Response = require('./util/response');

  ErrorDevMessage = Response.ErrorDevMessage;

  Permission = require('./permission');

  getDiscussionId = function(entityId) {
    return "entity:" + entityId + ":discussion";
  };

  getRelationId = function(path) {
    var splits;
    splits = path.relationships[0]._data.self.split('/');
    return splits[splits.length - 1];
  };

  hasPermission = function(req, res, next, cb) {
    var ErrorResponse, authorized, entity, err, errEntity, errUser, reqWithUser, resolvedId, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ErrorResponse = Response.ErrorResponse(res);
    console.log(req.params);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "hasPermission"
      });
      Slug.resolveSlug(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return resolvedId = arguments[1];
          };
        })(),
        lineno: 48
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (!NumUtil.isNum(resolvedId)) {
        return cb(true, ErrorResponse(400, ErrorDevMessage.dataValidationIssue("id")), null);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "hasPermission"
        });
        Entity.get(resolvedId, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errEntity = arguments[0];
              return entity = arguments[1];
            };
          })(),
          lineno: 54
        }));
        Permission.getUser(req, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errUser = arguments[0];
              return user = arguments[1];
            };
          })(),
          lineno: 55
        }));
        __iced_deferrals._fulfill();
      })(function() {
        err = errUser || errEntity;
        if (err) {
          return cb(true, ErrorResponse(500, ErrorDevMessage.dbIssue()), null);
        }
        req = _und.extend(_und.clone(req), {
          resolvedId: resolvedId
        });
        if (!entity._node.data["private"] && !user) {
          return cb(false, null, req);
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "hasPermission"
          });
          Permission.hasPermission(user, entity, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return authorized = arguments[1];
              };
            })(),
            lineno: 65
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return cb(true, ErrorResponse(500, ErrorDevMessage.dbIssue()), null);
          }
          if (!authorized) {
            return cb(true, ErrorResponse(401, ErrorDevMessage.permissionIssue()), null);
          }
          reqWithUser = _und.extend(_und.clone(req), {
            user: user
          });
          return cb(false, null, reqWithUser);
        });
      });
    });
  };

  basicAuthentication = Permission.authCurry(hasPermission);

  exports.search = function(req, res, next) {
    var Search;
    Search = require('./search');
    return Search.searchHandler(req, res, next);
  };

  exports.create = function(req, res, next) {
    var blob, entity, err, errs, ind, linkData, rels, tagName, tagObj, tagObjs, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "create"
      });
      Permission.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 86
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      console.log("Creating Entity");
      if (!user) {
        req.body["private"] = false;
      }
      req.body.user = user;
      errs = [];
      tagObjs = [];
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "create"
        });
        Entity.create(req.body, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return entity = arguments[1];
            };
          })(),
          lineno: 100
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          var _i, _len, _ref;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "create"
          });
          _ref = entity.serialize().tags;
          for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
            tagName = _ref[ind];
            Tag.getOrCreate(tagName, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                return function() {
                  __slot_1[__slot_2] = arguments[0];
                  return __slot_3[__slot_4] = arguments[1];
                };
              })(errs, ind, tagObjs, ind),
              lineno: 104
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len;
          err = err || _und.find(errs, function(err) {
            return err;
          });
          if (err) {
            return next(err);
          }
          linkData = Link.fillMetaData({});
          for (ind = _i = 0, _len = tagObjs.length; _i < _len; ind = ++_i) {
            tagObj = tagObjs[ind];
            CypherLinkUtil.createLink(tagObj._node, entity._node, Constants.REL_TAG, linkData, function(err, rel) {});
            if (user) {
              CypherLinkUtil.createLink(user._node, tagObj._node, Constants.REL_TAG, linkData, function(err, rel) {});
            }
          }
          (function(__iced_k) {
            if (user) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "entity.coffee",
                  funcname: "create"
                });
                CypherLinkUtil.createMultipleLinks(user._node, entity._node, [Constants.REL_CREATED, Constants.REL_ACCESS, Constants.REL_MODIFIED], linkData, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return rels = arguments[1];
                    };
                  })(),
                  lineno: 130
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "create"
              });
              entity.serialize(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return blob = arguments[0];
                  };
                })(),
                lineno: 132
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return Response.OKResponse(res)(201, blob);
            });
          });
        });
      });
    });
  };

  _show = function(req, res, next) {
    var attrBlobs, dataBlobs, entity, entityBlob, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_show"
      });
      Entity.get(req.resolvedId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 137
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      attrBlobs = null;
      dataBlobs = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_show"
        });
        if (req.query.attribute !== "false") {
          EntityUtil.getEntityAttributes(entity, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return attrBlobs = arguments[0];
              };
            })(),
            lineno: 145
          }));
        }
        if (req.query.data !== "false") {
          EntityUtil.getEntityData(entity, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return dataBlobs = arguments[0];
              };
            })(),
            lineno: 147
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        console.log(" I dont believe it");
        entityBlob = entity.serialize(null, {
          attributes: attrBlobs,
          data: dataBlobs
        });
        return Response.OKResponse(res)(200, entityBlob);
      });
    });
  };

  exports.show = basicAuthentication(_show);

  _edit = function(req, res, next) {
    var blob, entity, err, errs, ind, linkData, pathExists, tagName, tagObj, tagObjs, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    req.body.user = req.user;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_edit"
      });
      Entity.put(req.resolvedId, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 161
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        if (err.dbError) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        if (err.validationError) {
          return Response.ErrorResponse(res)(400, err.validationError);
        }
      }
      errs = [];
      tagObjs = [];
      (function(__iced_k) {
        var _i, _len, _ref;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_edit"
        });
        _ref = entity.serialize().tags;
        for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
          tagName = _ref[ind];
          Tag.getOrCreate(tagName, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, ind, tagObjs, ind),
            lineno: 172
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        err = _und.find(errs, function(err) {
          return err;
        });
        if (err) {
          return next(err);
        }
        linkData = Link.fillMetaData({});
        (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = tagObjs;
          _len = _ref.length;
          ind = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++ind;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(ind < _len)) {
              return _break();
            } else {
              tagObj = _ref[ind];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "entity.coffee",
                  funcname: "_edit"
                });
                CypherLinkUtil.hasLink(tagObj._node, entity._node, Constants.REL_ATTRIBUTE, "all", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return pathExists = arguments[1];
                    };
                  })(),
                  lineno: 186
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(!pathExists ? CypherLinkUtil.createLink(tagObj._node, entity._node, Constants.REL_TAG, linkData, function(err, rel) {}) : void 0);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "entity.coffee",
              funcname: "_edit"
            });
            entity.serialize(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return blob = arguments[0];
                };
              })(),
              lineno: 195
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return Response.OKResponse(res)(200, blob);
          });
        });
      });
    });
  };

  exports.edit = basicAuthentication(_edit);

  _del = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_del"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 202
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_del"
        });
        entity.del(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 205
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(err);
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        return Response.OKResponse(res)(204);
      });
    });
  };

  exports.del = basicAuthentication(_del);


  /*
  # Entity Use Section
  */

  _showUsers = function(req, res, next) {
    var blobs, entity, err, ind, node, nodes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_showUsers"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 219
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_showUsers"
        });
        entity._node.getRelationshipNodes([
          {
            type: Constants.REL_VOTED,
            direction: "in"
          }, {
            type: Constants.REL_MODIFIED,
            direction: "in"
          }, {
            type: Constants.REL_CREATED,
            direction: "in"
          }
        ], __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 227
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        console.log(err);
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        blobs = [];
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          blobs[ind] = (new User(node)).serialize();
        }
        return Response.OKResponse(res)(200, blobs);
      });
    });
  };

  exports.showUsers = basicAuthentication(_showUsers);

  _showUserVoteDetail = function(req, res, next) {
    var blobs, entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_showUserVoteDetail"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 242
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_showUserVoteDetail"
        });
        entity.getVoteByUser(req.user, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return blobs = arguments[1];
            };
          })(),
          lineno: 245
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blobs);
      });
    });
  };

  exports.showUserVoteDetail = basicAuthentication(_showUserVoteDetail);


  /*
  # Entity Attribute Section
  */

  _listAttribute = function(req, res, next) {
    var blobs, entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_listAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 256
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_listAttribute"
        });
        EntityUtil.getEntityAttributes(entity, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blobs = arguments[0];
            };
          })(),
          lineno: 259
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blobs);
      });
    });
  };

  exports.listAttribute = basicAuthentication(_listAttribute);

  _addAttribute = function(req, res, next) {
    var attr, blob, data, entity, err, errA, errE, existingLinkData, link, linkData, path, rel, relId, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    valid = Attribute.validateSchema(req.body);
    if (!valid) {
      return Response.ErrorResponse(res)(400, ErrorDevMessage.dataValidationIssue());
    }
    data = _und.clone(req.body);
    delete data['id'];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_addAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 277
      }));
      Attribute.getOrCreate(data, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 278
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errE || errA;
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      linkData = Link.normalizeData(_und.clone(req.body || {}));
      linkData['startend'] = EntityUtil.getStartEndIndex(attr._node.id, Constants.REL_ATTRIBUTE, req.params.id);
      console.log("__NEW__");
      console.log(linkData);
      console.log("__END__");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_addAttribute"
        });
        CypherLinkUtil.hasLink(entity._node, attr._node, Constants.REL_ATTRIBUTE, "all", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return path = arguments[1];
            };
          })(),
          lineno: 299
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (path) {
            relId = getRelationId(path);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "_addAttribute"
              });
              Link.get(relId, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return link = arguments[1];
                  };
                })(),
                lineno: 306
              }));
              __iced_deferrals._fulfill();
            })(function() {
              existingLinkData = link.serialize();
              console.log("__EXISTING__");
              console.log(existingLinkData);
              console.log("__END__");
              linkData = _und.extend(existingLinkData, linkData);
              console.log("__MERGED__");
              console.log(linkData);
              console.log("__END__");
              Link.put(relId, linkData, function() {});
              return __iced_k(rel = path.relationships[0]);
            });
          } else {
            linkData = Link.fillMetaData(linkData);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "_addAttribute"
              });
              CypherLinkUtil.createLink(attr._node, entity._node, Constants.REL_ATTRIBUTE, linkData, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return rel = arguments[1];
                  };
                })(),
                lineno: 327
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) {
                return next(err);
              }
              return __iced_k();
            });
          }
        })(function() {
          Link.index(rel, linkData);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "entity.coffee",
              funcname: "_addAttribute"
            });
            attr.serialize(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return blob = arguments[0];
                };
              })(),
              lineno: 333
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _und.extend(blob, {
              linkData: linkData
            });
            return Response.OKResponse(res)(200, blob);
          });
        });
      });
    });
  };

  exports.addAttribute = basicAuthentication(_addAttribute);

  _delAttribute = function(req, res, next) {
    var attr, entity, err, errA, errE, link, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_delAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 343
      }));
      Attribute.get(req.params.aId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 344
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errA || errE) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      startendVal = EntityUtil.getStartEndIndex(attr._node.id, Constants.REL_ATTRIBUTE, entity._node.id);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_delAttribute"
        });
        Link.find('startend', startendVal, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return link = arguments[1];
            };
          })(),
          lineno: 352
        }));
        __iced_deferrals._fulfill();
      })(function() {
        link._node.data.disabled = true;
        link.save();
        return Response.OKResponse(res)(204);
      });
    });
  };

  exports.delAttribute = basicAuthentication(_delAttribute);

  _getAttribute = function(req, res, next) {
    var ErrorResponse, attr, attrId, blob, entityId, errAttr, errLink, rel, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ErrorResponse = Response.ErrorResponse(res);
    entityId = req.params.id;
    attrId = req.params.aId;
    if (attrId == null) {
      return ErrorResponse(400, ErrorDevMessage.missingParam("id"));
    }
    startendVal = EntityUtil.getStartEndIndex(attrId, Constants.REL_ATTRIBUTE, entityId);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_getAttribute"
      });
      Link.find('startend', startendVal, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errLink = arguments[0];
            return rel = arguments[1];
          };
        })(),
        lineno: 375
      }));
      Attribute.get(attrId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errAttr = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 376
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errLink || errAttr) {
        return ErrorResponse(500, ErrorDevMessage.dbIssue());
      }
      blob = {};
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_getAttribute"
        });
        attr.serialize(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blob = arguments[0];
            };
          })(),
          lineno: 381
        }), entityId);
        __iced_deferrals._fulfill();
      })(function() {
        _und.extend(blob, {
          linkData: rel.serialize()
        });
        return Response.OKResponse(res)(200, blob);
      });
    });
  };

  exports.getAttribute = basicAuthentication(_getAttribute);

  _updateAttributeLink = function(req, res, next) {
    var ErrorResponse, attr, attrId, blob, entityId, err, errAttr, errLink, linkData, rel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ErrorResponse = Response.ErrorResponse(res);
    entityId = req.params.id;
    attrId = req.params.aId;
    linkData = _und.clone(req.body['linkData'] || {});
    if (!attrId) {
      return ErrorResponse(400, ErrorDevMessage.missingParam("id"));
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_updateAttributeLink"
      });
      Attribute.get(attrId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errAttr = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 399
      }));
      Link.put(linkData['id'], linkData, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errLink = arguments[0];
            return rel = arguments[1];
          };
        })(),
        lineno: 400
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errAttr || errLink;
      if (err) {
        return ErrorResponse(500, ErrorDevMessage.dbIssue());
      }
      blob = attr.serialize();
      _und.extend(blob, {
        linkData: rel.serialize()
      });
      return Response.OKResponse(res)(200, blob);
    });
  };

  exports.updateAttributeLink = basicAuthentication(_updateAttributeLink);

  exports.voteAttribute = function(req, res, next) {
    var attr, entity, err, errA, errE, errUser, user, vote, voteData, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "voteAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 415
      }));
      Attribute.get(req.params.aId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 416
      }));
      Permission.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 417
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errA || errE;
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      voteData = _und.clone(req.body);
      voteData.ipAddr = req.header['x-real-ip'] || req.connection.remoteAddress;
      voteData.browser = req.useragent.Browser;
      voteData.os = req.useragent.OS;
      voteData.lang = req.headers['accept-language'];
      voteData.attrId = attr.serialize().id;
      voteData.attrName = attr.serialize().name;
      if (user) {
        voteData.user = user._node.data.username;
      }
      vote = new Vote(voteData);
      return entity.vote(user, attr, vote, function(err, voteTally) {
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        return Response.OKResponse(res)(200, voteTally);
      });
    });
  };


  /*
  # Entity Data Section
  */

  _addData = function(req, res, next) {
    var data, entity, err, input, rel, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    input = _und.clone(req.body);
    value = null;
    delete input['id'];
    (function(__iced_k) {
      if (input.dataType === Data.DataType.TIME_SERIES) {
        return __iced_k("");
      } else {
        (function(__iced_k) {
          if (input.dataType === Data.DataType.NUMBER) {
            (function(__iced_k) {
              if (input.srcType === Data.SrcType.JSON) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "entity.coffee",
                    funcname: "_addData"
                  });
                  Remote.getJSONData(input.srcUrl, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return value = arguments[1];
                      };
                    })(),
                    lineno: 450
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  if (input.srcType === Data.SrcType.DOM) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "entity.coffee",
                        funcname: "_addData"
                      });
                      Remote.getDOMData(input.srcUrl, input.selector, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            err = arguments[0];
                            return value = arguments[1];
                          };
                        })(),
                        lineno: 452
                      }));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(__iced_k);
              }
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(__iced_k);
      }
    })(function() {
      if (value && !err) {
        input.value = value;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_addData"
        });
        Entity.get(req.params.id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return entity = arguments[1];
            };
          })(),
          lineno: 457
        }));
        Data.create(input, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 458
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "_addData"
          });
          CypherLinkUtil.createLink(data._node, entity._node, Constants.REL_DATA, {}, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return rel = arguments[1];
              };
            })(),
            lineno: 466
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
          }
          return Response.OKResponse(res)(200, data.serialize());
        });
      });
    });
  };

  exports.addData = basicAuthentication(_addData);

  _getData = function(req, res, next) {
    req.params.id = req.params.dId;
    return DataRoute.show(req, res, next);
  };

  exports.getData = basicAuthentication(_getData);

  _listData = function(req, res, next) {
    var blobs, entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_listData"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 481
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      console.log("WHAT");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_listData"
        });
        EntityUtil.getEntityData(entity, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blobs = arguments[0];
            };
          })(),
          lineno: 486
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blobs);
      });
    });
  };

  exports.listData = basicAuthentication(_listData);

  _delData = function(req, res, next) {};

  exports.delData = basicAuthentication(_delData);


  /*
  # Entity Relation section
  */

  exports.listRelation = function(req, res, next) {
    var blob, blobs, endId, entityId, err, extraData, ind, query, rel, relType, rels, startId, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    entityId = req.params.id;
    relType = req.params.relation;
    query = CypherBuilder.getOutgoingRelsCypherQuery(entityId, relType);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "listRelation"
      });
      Neo.query(Link, query, {}, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return rels = arguments[1];
          };
        })(),
        lineno: 507
      }));
      __iced_deferrals._fulfill();
    })(function() {
      blobs = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "listRelation"
        });
        for (ind = _i = 0, _len = rels.length; _i < _len; ind = ++_i) {
          rel = rels[ind];
          rel = new Link(rel.r);
          tmp = rel._node._data.start.split('/');
          startId = tmp[tmp.length - 1];
          tmp = rel._node._data.end.split('/');
          endId = tmp[tmp.length - 1];
          extraData = {
            type: rel._node._data.type,
            start: startId,
            end: endId
          };
          rel.serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(blobs, ind),
            lineno: 526
          }), extraData);
        }
        __iced_deferrals._fulfill();
      })(function() {
        return res.json((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = blobs.length; _i < _len; _i++) {
            blob = blobs[_i];
            _results.push(blob);
          }
          return _results;
        })());
      });
    });
  };

  exports.linkEntity = function(req, res, next) {
    var dstEntity, dstToSrcLink, errDst, errSrc, linkData, linkName, relation, srcEntity, srcToDstLink, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "linkEntity"
      });
      Entity.get(req.params.srcId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errSrc = arguments[0];
            return srcEntity = arguments[1];
          };
        })(),
        lineno: 534
      }));
      Entity.get(req.params.dstId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errDst = arguments[0];
            return dstEntity = arguments[1];
          };
        })(),
        lineno: 535
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errSrc) {
        return next(errSrc);
      }
      if (errDst) {
        return next(errDst);
      }
      relation = req.body;
      if (relation['src_dst']) {
        linkName = Link.normalizeName(relation['src_dst']['name']);
        linkData = Link.deserialize(relation['src_dst']['data']);
        srcToDstLink = CypherLinkUtil.createLink(srcEntity._node, dstEntity._node, linkName, linkData);
      }
      if (relation['dst_src']) {
        linkName = Link.normalizeName(relation['dst_src']['name']);
        linkData = Link.deserialize(relation['dst_src']['data']);
        dstToSrcLink = CypherLinkUtil.createLink(dstEntity._node, srcEntity._node, linkName, linkData);
      }
      return res.status(201).send();
    });
  };

  exports.unlinkEntity = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

}).call(this);
