// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Data, Entity, EntityUtil, ErrorDevMessage, Fields, Neo, OTHER_SPLIT_REGEX, Permission, REL_SPLIT_REGEX, Ranking, Response, Tag, Vote, cypherQueryConstructor, iced, luceneQueryContructor, queryAnalyzer, searchFunc, searchableClass, serializeEntity, serializeSearchResult, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  require('source-map-support').install();

  _und = require('underscore');

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  Data = require('../models/data');

  Ranking = require('../models/ranking');

  Vote = require('../models/vote');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Constants = require('../config').Constants;

  Fields = require('./util/fields');

  Response = require('./util/response');

  ErrorDevMessage = Response.ErrorDevMessage;

  EntityUtil = require('./entity/util');

  Permission = require('./permission');

  OTHER_SPLIT_REGEX = /\bwith\b/;

  REL_SPLIT_REGEX = /\bvia\b/;

  searchableClass = {
    entity: Entity,
    attribute: Attribute,
    tag: Tag,
    data: Data
  };

  searchFunc = {
    cypher: Neo.query,
    lucene: Neo.search
  };

  queryAnalyzer = function(searchClass, query) {
    var contributorQuery, mainQuery, relQuery, remainder, _ref, _ref1;
    query = decodeURI(query);
    mainQuery = relQuery = contributorQuery = '';
    console.log("query: " + query);
    _ref = query.split('@'), query = _ref[0], contributorQuery = _ref[1];
    console.log("Searching Contributor " + contributorQuery);
    _ref1 = query.split(' '), mainQuery = _ref1[0], remainder = _ref1[1];
    console.log("mainQuery: " + mainQuery);
    if (remainder) {
      relQuery = remainder.split('#');
    }
    console.log("relQuery: " + relQuery);
    if (mainQuery) {
      mainQuery = _und(mainQuery.split('#')).map(function(part) {
        return encodeURIComponent(_und.escape(part.trim()));
      });
    }
    if (relQuery) {
      relQuery = _und(relQuery).map(function(item) {
        return encodeURIComponent(_und.escape(item.trim()));
      }).filter(function(item) {
        return item;
      });
    }
    return cypherQueryConstructor(searchClass, mainQuery, relQuery);
  };

  cypherQueryConstructor = function(searchClass, mainMatches, relMatches, skip, limit) {
    var endQ, ind, relMatchQ, relName, relationship, startNodeQ, _i, _len;
    if (mainMatches == null) {
      mainMatches = [];
    }
    if (relMatches == null) {
      relMatches = [];
    }
    if (skip == null) {
      skip = 0;
    }
    if (limit == null) {
      limit = 1000;
    }
    console.log("mainMatches: " + mainMatches);
    console.log("relationMatches: " + relMatches);
    startNodeQ = (function() {
      var startingNodes;
      startingNodes = _und(mainMatches).reduce(function(start, name) {
        return start + ("\"%23" + name + "\"~0.65,");
      }, "");
      return "START n=node:__indexName__('name:(" + startingNodes + ")')";
    })();
    console.log("TESTING: " + skip);
    endQ = "RETURN DISTINCT n AS result SKIP " + skip + " LIMIT " + limit + ";";
    relMatchQ = [];
    for (ind = _i = 0, _len = relMatches.length; _i < _len; ind = ++_i) {
      relName = relMatches[ind];
      relationship = Constants.REL_ATTRIBUTE;
      relMatchQ.push("MATCH (n)<-[:" + relationship + "]-(other) WHERE other.name=~'(?i)" + (decodeURIComponent(relName)) + "'");
    }
    relMatchQ = relMatchQ ? relMatchQ.join(' WITH n as n ') : "";
    switch (searchClass) {
      case Tag:
        return [startNodeQ, "MATCH (n)-[:_TAG]->(entity) WITH entity as n", relMatchQ, "WITH n as n", endQ].join('\n');
      case Attribute:
        return [startNodeQ, "MATCH (n)-[:_ATTRIBUTE]->(entity) WITH entity as n", relMatchQ, "WITH n as n", endQ].join('\n');
      default:
        return [startNodeQ, relMatchQ, "WITH n as n", endQ].join('\n');
    }
  };

  luceneQueryContructor = function(query) {
    var key, queryString, val, _i, _len;
    queryString = [];
    for (val = _i = 0, _len = query.length; _i < _len; val = ++_i) {
      key = query[val];
      queryString.push("" + key + ":" + val);
    }
    return queryString.join("AND");
  };

  serializeEntity = function(entity, cb) {
    var attrBlobs, dataBlobs, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "search.coffee",
        funcname: "serializeEntity"
      });
      EntityUtil.getEntityAttributes(entity, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return attrBlobs = arguments[0];
          };
        })(),
        lineno: 103
      }));
      EntityUtil.getEntityData(entity, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return dataBlobs = arguments[0];
          };
        })(),
        lineno: 104
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return cb(entity.serialize(null, {
        attributes: attrBlobs,
        data: dataBlobs
      }));
    });
  };

  serializeSearchResult = function(user, searchResult, identified, cb) {
    var authorized, blobResults, entity, entitySerialized, err, ind, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (identified == null) {
      identified = [];
    }
    blobResults = [];
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = searchResult;
      _len = _ref.length;
      ind = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++ind;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(ind < _len)) {
          return _break();
        } else {
          obj = _ref[ind];
          entity = new Entity(obj.result);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "search.coffee",
              funcname: "serializeSearchResult"
            });
            Permission.hasPermission(user, entity, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return authorized = arguments[1];
                };
              })(),
              lineno: 117
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (!authorized) {
                (function(__iced_k) {
_continue()
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "search.coffee",
                  funcname: "serializeSearchResult"
                });
                serializeEntity(entity, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return entitySerialized = arguments[0];
                    };
                  })(),
                  lineno: 119
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(!identified[entitySerialized.id] ? (blobResults.push(entitySerialized), identified[entitySerialized.id] = true) : void 0);
              });
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      console.log("ME OK?");
      return cb([blobResults, identified]);
    });
  };

  exports.searchHandler = function(req, res, next) {
    var blobResults, cQuery, cleanedQuery, entities, err, errU, errs, identified, ind, query, queryParams, rankingName, rankingQuery, result, results, searchClass, searchClasses, serialized, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!req.query.q) {
      Response.OKResponse(res)(200, {});
    }
    queryParams = Fields.parseQuery(req);
    cleanedQuery = req.query.q.trim();
    if (req.params.type) {
      searchClasses = [searchableClass[req.params.type]];
    } else {
      searchClasses = _und.values(searchableClass);
    }
    results = [];
    errs = [];
    rankingQuery = cleanedQuery.indexOf("ranking:") >= 0;
    (function(__iced_k) {
      var _i, _len;
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "search.coffee",
        funcname: "searchHandler"
      });
      Permission.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errU = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 148
      }));
      if (rankingQuery) {
        rankingName = encodeURIComponent(_und.escape(cleanedQuery.substr(8).trim()));
        cQuery = "START n=node:nRanking('name:" + rankingName + "~0.25') MATCH (n)-[r:_RANK]->(x)                RETURN DISTINCT n AS ranking, r.rank AS rank, x AS entity ORDER BY ID(n), r.rank;";
        Neo.query(Ranking, cQuery, {}, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errs = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 160
        }));
      } else {
        for (ind = _i = 0, _len = searchClasses.length; _i < _len; ind = ++_i) {
          searchClass = searchClasses[ind];
          query = queryAnalyzer(searchClass, cleanedQuery);
          console.log("Query: \n " + (query.replace('__indexName__', searchClass.INDEX_NAME)));
          console.log("==================");
          Neo.query(searchClass, query.replace('__indexName__', searchClass.INDEX_NAME), {}, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, ind, results, ind),
            lineno: 170
          }));
        }
      }
      __iced_deferrals._fulfill();
    })(function() {
      err = _und.find(errs, function(err) {
        return err;
      });
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      blobResults = [];
      identified = [];
      (function(__iced_k) {
        if (rankingQuery) {
          entities = _und(results).map(function(result) {
            return result.entity;
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "search.coffee",
              funcname: "searchHandler"
            });
            serializeSearchResult(user, entities, identified, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return serialized = arguments[0];
                };
              })(),
              lineno: 181
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k((blobResults = serialized[0], identified = serialized[1], serialized));
          });
        } else {
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = results;
            _len = _ref.length;
            ind = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++ind;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(ind < _len)) {
                return _break();
              } else {
                result = _ref[ind];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "search.coffee",
                    funcname: "searchHandler"
                  });
                  serializeSearchResult(user, result, identified, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return serialized = arguments[0];
                      };
                    })(),
                    lineno: 185
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(serialized.length === 2 ? (blobResults[ind] = serialized[0], identified = serialized[1], serialized) : void 0);
                });
              }
            };
            _while(__iced_k);
          })(function() {
            return __iced_k(blobResults = _und(blobResults).flatten());
          });
        }
      })(function() {
        return Response.OKResponse(res)(200, blobResults);
      });
    });
  };

}).call(this);
