// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Entity, ErrorDevMessage, Neo, Response, Tag, iced, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  require('source-map-support').install();

  _und = require('underscore');

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Constants = require('../config').Constants;

  Response = require('./util/response');

  ErrorDevMessage = Response.ErrorDevMessage;

  exports.search = function(req, res, next) {
    var Search;
    Search = require('./search');
    return Search.searchHandler(req, res, next);
  };

  exports.create = function(req, res, next) {
    var attr, blob, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "attribute.coffee",
        funcname: "create"
      });
      Attribute.create(req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 24
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "attribute.coffee",
          funcname: "create"
        });
        attr.serialize(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blob = arguments[0];
            };
          })(),
          lineno: 27
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blob);
      });
    });
  };

  exports.show = function(req, res, next) {
    var attr, blob, entityId, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (isNaN(req.params.id)) {
      return Response.ErrorResponse(res)(400, ErrorDevMessage.missingParam('id'));
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "attribute.coffee",
        funcname: "show"
      });
      Attribute.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 35
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _ref;
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      entityId = (_ref = req.query['entityId']) != null ? _ref : null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "attribute.coffee",
          funcname: "show"
        });
        attr.serialize(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blob = arguments[0];
            };
          })(),
          lineno: 40
        }), entityId);
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blob);
      });
    });
  };

  exports.edit = function(req, res, next) {
    var attr, blob, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "attribute.coffee",
        funcname: "edit"
      });
      Attribute.put(req.params.id, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 45
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "attribute.coffee",
          funcname: "edit"
        });
        attr.serialize(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blob = arguments[0];
            };
          })(),
          lineno: 48
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return Response.OKResponse(res)(200, blob);
      });
    });
  };

  exports.del = function(req, res, next) {
    var attr, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "attribute.coffee",
        funcname: "del"
      });
      Attribute.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 53
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "attribute.coffee",
          funcname: "del"
        });
        attr.del(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 56
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        return Response.OKResponse(res)(204);
      });
    });
  };

  exports.listEntity = function(req, res, next) {
    var attr, blob, blobs, err, ind, node, nodes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "attribute.coffee",
        funcname: "listEntity"
      });
      Attribute.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 63
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "attribute.coffee",
          funcname: "listEntity"
        });
        attr._node.getRelationshipNodes({
          type: Constants.REL_ATTRIBUTE,
          direction: 'out'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 68
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        blobs = [];
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "attribute.coffee",
            funcname: "listEntity"
          });
          for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
            node = nodes[ind];
            (new Entity(node)).serialize(__iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  return __slot_1[__slot_2] = arguments[0];
                };
              })(blobs, ind),
              lineno: 74
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          return Response.OKResponse(res)(204, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = blobs.length; _i < _len; _i++) {
              blob = blobs[_i];
              _results.push(blob);
            }
            return _results;
          })());
        });
      });
    });
  };

}).call(this);
