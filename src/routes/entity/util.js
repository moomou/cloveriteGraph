// Generated by IcedCoffeeScript 1.6.3-e

/*
# Contains useful function for manipulating entity
*/

(function() {
  var Attribute, Constants, Cypher, CypherBuilder, CypherLinkUtil, Data, Entity, Link, Logger, Neo, THRESHOLD, Tag, User, getStartEndIndex, iced, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  Constants = require('../../config').Constants;

  Logger = require('../../util/logger');

  Neo = require('../../models/neo');

  User = require('../../models/user');

  Entity = require('../../models/entity');

  Data = require('../../models/data');

  Attribute = require('../../models/attribute');

  Tag = require('../../models/tag');

  Link = require('../../models/link');

  Cypher = require('../util/cypher');

  CypherBuilder = Cypher.CypherBuilder;

  CypherLinkUtil = Cypher.CypherLinkUtil;

  exports.getStartEndIndex = getStartEndIndex = function(start, rel, end) {
    return "" + start + "_" + rel + "_" + end;
  };

  exports.getEntityAttributes = function(entity, cb) {
    var attrBlobs, blob, err, ind, linkData, node, nodes, rels, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    rels = [];
    attrBlobs = [];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity/util.coffee",
        funcname: "getEntityAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 32
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity/util.coffee",
          funcname: "getEntityAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          startendVal = getStartEndIndex(node.id, Constants.REL_ATTRIBUTE, entity._node.id);
          Link.find('startend', startendVal, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(rels, ind),
            lineno: 42
          }));
          (new Attribute(node)).serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(attrBlobs, ind),
            lineno: 43
          }), entity._node.id);
        }
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        for (ind = _i = 0, _len = attrBlobs.length; _i < _len; ind = ++_i) {
          blob = attrBlobs[ind];
          if (rels[ind] && !rels[ind]._node.data.disabled) {
            linkData = {
              linkData: rels[ind].serialize()
            };
            _und.extend(blob, linkData);
          }
        }
        attrBlobs = _und(attrBlobs).filter(function(i) {
          return !_und(i.linkData).isEmpty();
        });
        return cb(attrBlobs);
      });
    });
  };

  exports.getEntityData = function(entity, cb) {
    var dataNode, err, ind, node, nodes, sDataBlob, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity/util.coffee",
        funcname: "getEntityData"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_DATA,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 56
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      sDataBlob = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity/util.coffee",
          funcname: "getEntityData"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          dataNode = new Data(node);
          sDataBlob.push(dataNode.serialize());
        }
        __iced_deferrals._fulfill();
      })(function() {
        return cb(sDataBlob);
      });
    });
  };

  exports.getEntityRanking = function(entity, cb) {};

  exports.addData = function(entity, dataInputs, cb) {
    var data, datas, err, errs, ind, input, rels, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    errs = [];
    rels = [];
    datas = [];
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = dataInputs;
      _len = _ref.length;
      ind = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++ind;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(ind < _len)) {
          return _break();
        } else {
          input = _ref[ind];
          delete input.id;
          value = null;
          (function(__iced_k) {
            if (input.dataType === Data.DataType.TIME_SERIES) {
              return __iced_k("");
            } else {
              (function(__iced_k) {
                if (input.dataType === Data.DataType.FIELD) {
                  (function(__iced_k) {
                    if (input.srcType === Data.SrcType.JSON) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "entity/util.coffee",
                          funcname: "addData"
                        });
                        Remote.getJSONData(input.srcUrl, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              err = arguments[0];
                              return value = arguments[1];
                            };
                          })(),
                          lineno: 83
                        }));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      (function(__iced_k) {
                        if (input.srcType === Data.SrcType.DOM) {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "entity/util.coffee",
                              funcname: "addData"
                            });
                            Remote.getDOMData(input.srcUrl, input.selector, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  err = arguments[0];
                                  return value = arguments[1];
                                };
                              })(),
                              lineno: 87
                            }));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(__iced_k);
                    }
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            }
          })(function() {
            if (!input.value && value && !err) {
              input.value = value;
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity/util.coffee",
                funcname: "addData"
              });
              Data.create(input, __iced_deferrals.defer({
                assign_fn: (function(__slot_1, __slot_2) {
                  return function() {
                    err = arguments[0];
                    return __slot_1[__slot_2] = arguments[1];
                  };
                })(datas, ind),
                lineno: 92
              }));
              __iced_deferrals._fulfill();
            })(function() {
              data = datas[ind];
              (function(__iced_k) {
                if (err) {
                  (function(__iced_k) {
_continue()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "entity/util.coffee",
                    funcname: "addData"
                  });
                  CypherLinkUtil.createLink(data._node, entity._node, Constants.REL_DATA, {}, __iced_deferrals.defer({
                    assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                      return function() {
                        __slot_1[__slot_2] = arguments[0];
                        return __slot_3[__slot_4] = arguments[1];
                      };
                    })(errs, ind, rels, ind),
                    lineno: 101
                  }));
                  __iced_deferrals._fulfill();
                })(_next);
              });
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      err = _und(errs).filter(function(err) {
        return err;
      });
      if (_und(err).isEmpty()) {
        return cb(null, datas);
      } else {
        return cb(errs, datas);
      }
    });
  };

  THRESHOLD = 10;

  exports.cleanAttributes = function(entity, cb) {
    var cypher, err, ind, node, nodes, now, rel, rels, startendVal, vote, votesPerAttribute, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity/util.coffee",
        funcname: "cleanAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 114
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      cypher = ["START s=node({entityId}), e=node({attrId})", "MATCH s-[r:" + Constants.REL_VOTED + "]-e", "RETURN COUNT(r) AS count;"];
      votesPerAttribute = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity/util.coffee",
          funcname: "cleanAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          Neo.query(null, cypher.join("\n"), {
            entityId: entity._node.id,
            attrId: node.id
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(votesPerAttribute, ind),
            lineno: 127
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        now = new Date().getTime() / 1000;

        /*
        # The logic here should be if an attribute is over 10800 (3 days) old
        # and has no votes more than 2, remove link by marking as disabled
        */
        Logger.debug("Votes per attribute: " + votesPerAttribute);
        rels = {};
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity/util.coffee",
            funcname: "cleanAttributes"
          });
          for (ind = _i = 0, _len = votesPerAttribute.length; _i < _len; ind = ++_i) {
            vote = votesPerAttribute[ind];
            vote = vote[0];
            if (vote.count < THRESHOLD) {
              if (now - nodes[ind].data.createdAt >= 10800) {
                startendVal = getStartEndIndex(nodes[ind].id, Constants.REL_ATTRIBUTE, entity._node.id);
                Link.find('startend', startendVal, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1, __slot_2) {
                    return function() {
                      err = arguments[0];
                      return __slot_1[__slot_2] = arguments[1];
                    };
                  })(rels, ind),
                  lineno: 147
                }));
              }
            }
          }
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len, _ref;
          _ref = _und(rels).values();
          for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
            rel = _ref[ind];
            rel._node.data.disabled = true;
            rel.save();
          }
          return cb();
        });
      });
    });
  };

}).call(this);
