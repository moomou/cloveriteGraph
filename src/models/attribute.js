// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, AttributeSchema, INDEX_NAME, Indexes, Logger, Neo, SchemaUtil, SchemaValidation, Slug, redis, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  redis = require('./setup').db.redis;

  Logger = require('../util/logger');

  Slug = require('../util/slug');

  Neo = require('./neo');

  SchemaUtil = require('./stdSchema');

  INDEX_NAME = 'nAttribute';

  Indexes = [
    {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'name',
      INDEX_VALUE: ''
    }, {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'tone',
      INDEX_VALUE: ''
    }
  ];

  AttributeSchema = {
    name: 'Attribute Name',
    description: '',
    tone: 'positive',
    upVote: 0,
    downVote: 0
  };

  SchemaValidation = {
    name: SchemaUtil.required('string', {
      tone: SchemaUtil.optional('string')
    })
  };

  module.exports = Attribute = (function(_super) {
    __extends(Attribute, _super);

    function Attribute(_node) {
      this._node = _node;
      Attribute.__super__.constructor.call(this, this._node);
    }

    Attribute.prototype.serialize = function(cb, entityId) {

      /*
      Logger.debug "Serialize attr: #{entityId}"
      if not entityId
          return super(cb, null)
      
      await
          redis.get "entity:#{entityId}::attr:#{@_node.id}::positive", defer(err, upVote)
          redis.get "entity:#{entityId}::attr:#{@_node.id}::negative", defer(err, downVote)
      
      voteTally =
          upVote   : parseInt(upVote) or 0
          downVote : parseInt(downVote) or 0
      
      Logger.debug "VoteTally: #{voteTally.upVote}"
      */
      return Attribute.__super__.serialize.call(this, cb);
    };

    return Attribute;

  })(Neo);


  /*
  # Static Method
  */

  Attribute.Name = 'nAttribute';

  Attribute.INDEX_NAME = INDEX_NAME;

  Attribute.Indexes = Indexes;

  Attribute.getSlugTitle = function(data) {
    return Slug.slugify(data.name);
  };

  Attribute.validateSchema = function(data) {
    return SchemaUtil.validate(SchemaValidation, data);
  };

  Attribute.deserialize = function(data) {
    return Neo.deserialize(AttributeSchema, data);
  };

  Attribute.create = function(reqBody, cb) {
    return Neo.create(Attribute, reqBody, Indexes, cb);
  };

  Attribute.get = function(id, cb) {
    return Neo.get(Attribute, id, cb);
  };

  Attribute.getOrCreate = function(reqBody, cb) {
    return Neo.getOrCreate(Attribute, reqBody, cb);
  };

  Attribute.put = function(nodeId, reqBody, cb) {
    return Neo.put(Attribute, nodeId, reqBody, cb);
  };

}).call(this);
