// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Composed, INDEX_NAME, Indexes, Logger, Neo, SchemaUtil, Slug, redis, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  Logger = require('util');

  _und = require('underscore');

  redis = require('./setup').db.redis;

  Slug = require('../util/slug');

  Neo = require('./neo');

  SchemaUtil = require('./stdSchema');

  INDEX_NAME = 'nComposed';

  Indexes = [
    {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'title',
      INDEX_VALUE: ''
    }
  ];

  module.exports = Composed = (function(_super) {
    var _Schema, _SchemaValidation;

    __extends(Composed, _super);

    _Schema = {
      title: '',
      profileIconUrl: '',
      authorName: [''],
      authorProfileUrl: [''],
      tags: [''],
      dataChain: [''],
      entityId: ['']
    };

    _SchemaValidation = {};

    function Composed(_node) {
      this._node = _node;
      Composed.__super__.constructor.call(this, this._node);
    }

    Composed.INDEX_NAME = INDEX_NAME;

    Composed.Name = INDEX_NAME;

    Composed.Indexes = Indexes;

    Composed.validateSchema = function(data) {
      return SchemaUtil.validate(_SchemaValidation, data);
    };

    Composed.getSlugTitle = function(data) {
      return Slug.slugify(data.name);
    };

    Composed.deserialize = function(data) {
      return Neo.deserialize(_Schema, data);
    };

    Composed.create = function(reqBody, cb) {
      return Neo.create(Composed, reqBody, this.Indexes, cb);
    };

    Composed.get = function(id, cb) {
      return Neo.get(Composed, id, cb);
    };

    Composed.getOrCreate = function(reqBody, cb) {
      return Neo.getOrCreate(Composed, reqBody, cb);
    };

    Composed.put = function(nodeId, reqBody, cb) {
      return Neo.put(Composed, nodeId, reqBody, cb);
    };

    return Composed;

  })(Neo);

}).call(this);
