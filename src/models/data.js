// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Data, DataSchema, INDEX_NAME, Indexes, Logger, Neo, SchemaUtil, Slug, _und,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  _und = require('underscore');

  Logger = require('util');

  Slug = require('../util/slug');

  Neo = require('./neo');

  SchemaUtil = require('./stdSchema');

  INDEX_NAME = 'nData';

  Indexes = [
    {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'name',
      INDEX_VALUE: ''
    }, {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'srcUrl',
      INDEX_VALUE: ''
    }, {
      INDEX_NAME: INDEX_NAME,
      INDEX_KEY: 'dataType',
      INDEX_VALUE: ''
    }
  ];

  DataSchema = {
    name: '',
    dataType: '',
    srcUrl: '',
    srcType: '',
    selector: '',
    value: ''
  };

  module.exports = Data = (function(_super) {
    __extends(Data, _super);

    function Data(_node) {
      this._node = _node;
      Data.__super__.constructor.call(this, this._node);
    }

    return Data;

  })(Neo);

  Data.Name = 'nData';

  Data.INDEX_NAME = INDEX_NAME;

  Data.Indexes = Indexes;

  Data.SrcType = {
    JSON: 'json',
    DOM: 'dom',
    BINARY: 'binary'
  };

  Data.DataType = {
    IMAGE: 'image',
    VIDEO: 'video',
    NUMBER: 'number',
    TIME_SERIES: 'timeseries',
    FILE: 'file'
  };

  Data.getSlugTitle = function(data) {
    return Slug.slugify(data.name);
  };

  Data.deserialize = function(data) {
    return Neo.deserialize(DataSchema, data);
  };

  Data.create = function(reqBody, cb) {
    return Neo.create(Data, reqBody, Indexes, cb);
  };

  Data.get = function(id, cb) {
    return Neo.get(Data, id, cb);
  };

  Data.getOrCreate = function(reqBody, cb) {
    return Neo.getOrCreate(Data, reqBody, cb);
  };

  Data.put = function(nodeId, reqBody, cb) {
    return Neo.put(Data, nodeId, reqBody, cb);
  };

}).call(this);
