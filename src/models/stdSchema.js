// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var ErrorResponse, Hashids, Logger, Validators, validationSchema, _und, _validator,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };



  _und = require('underscore');

  Hashids = require('hashids');

  Logger = require('../util/logger');

  _validator = function(valid, validate, input) {
    if (!valid) {
      return [false, input];
    }
    valid = validate(input);
    return [valid, input];
  };

  Validators = {
    string: function(state, input) {
      return _validator(state, _und.isString, input);
    },
    number: function(state, input) {
      return _validator(state, _und.isNumber, input);
    },
    array: function(state, input) {
      return _validator(state, _und.isArray, input);
    }
  };

  validationSchema = function(required, validator) {
    if (!_und.isFunction(validator)) {
      validator = Validators[(_und.values(validator))[0]];
    }
    return {
      required: required,
      validator: validator
    };
  };

  exports.validate = function(schemaValidation, input) {
    var result;
    result = _und.map(schemaValidation, function(value, key) {
      var valid, _, _ref, _ref1;
      Logger.debug("Validing: " + key);
      if (value.required) {
        if (!input[key]) {
          return false;
        }
        _ref = value.validator(true, input[key]), valid = _ref[0], _ = _ref[1];
        return valid;
      } else if (__indexOf.call(input, key) >= 0) {
        _ref1 = value.validator(true, input[key]), valid = _ref1[0], _ = _ref1[1];
        return valid;
      } else {
        return true;
      }
    });
    return !_und.contains(result, false);
  };

  exports.required = function() {
    return validationSchema(true, arguments);
  };

  exports.optional = function() {
    return validationSchema(false, arguments);
  };

  exports.ErrorResponse = ErrorResponse = (function() {
    function ErrorResponse(msg, fix) {
      this.msg = msg;
      this.fix = fix;
    }

    ErrorResponse.prototype.serialize = function() {
      return {
        message: this.msg,
        solution: this.fix
      };
    };

    return ErrorResponse;

  })();

}).call(this);
