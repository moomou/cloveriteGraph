// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Logger, Neo, RedisModel, SchemaUtil, iced, redis, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Logger = require('util');

  _und = require('underscore');

  redis = require('./setup').db.redis;

  Neo = require('./neo');

  SchemaUtil = require('./stdSchema');

  module.exports = RedisModel = (function() {
    var _del, _load, _save;

    function RedisModel() {}

    RedisModel.Name = "dummy";

    RedisModel.Schema = {};

    _del = function(prefix, id, cb) {
      return redis.del("" + prefix + ":" + id, cb);
    };

    _save = function(prefix, id, jsonString, cb) {
      var err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "models/redisModel.coffee",
          funcname: "RedisModel._save"
        });
        redis.set("" + prefix + ":" + id, jsonString, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return res = arguments[1];
            };
          })(),
          lineno: 18
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!err) {
          return cb(null, JSON.parse(jsonString));
        } else {
          return cb(err, null);
        }
      });
    };

    _load = function(prefix, id, cb) {
      var err, jsonString, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "models/redisModel.coffee",
          funcname: "RedisModel._load"
        });
        redis.get("" + prefix + ":" + id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return jsonString = arguments[1];
            };
          })(),
          lineno: 27
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(jsonString);
        if (!err) {
          return cb(null, JSON.parse(jsonString));
        } else {
          return cb(err, null);
        }
      });
    };

    RedisModel.create = function(data, cb) {
      var dataCopy, jsonString, uniqueId;
      uniqueId = (+new Date()).toString(36);
      dataCopy = _und.clone(this.deserialize(data));
      dataCopy.id = uniqueId;
      jsonString = this.getJSONString(dataCopy);
      return _save(this.getPrefix(), uniqueId, jsonString, cb);
    };

    RedisModel.show = function(id, cb) {
      if (!id) {
        return cb({
          validationError: "No id provided."
        }, null);
      }
      return _load(this.getPrefix(), id, cb);
    };

    RedisModel.update = function(id, body, cb) {
      var currentObj, dataCopy, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (body.id !== id) {
        return cb({
          validationError: "Id in data and url do not match."
        }, null);
      }
      dataCopy = _und.clone(body);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "models/redisModel.coffee",
          funcname: "RedisModel.update"
        });
        _this.show(id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return currentObj = arguments[1];
            };
          })(),
          lineno: 52
        }));
        __iced_deferrals._fulfill();
      })(function() {
        _und.extend(currentObj, _this.deserialize(dataCopy));
        return _save(_this.getPrefix(), JSON.stringify(currentObj, cb));
      });
    };

    RedisModel["delete"] = function(id, cb) {
      if (!id) {
        return cb({
          validationError: "No id provided."
        }, null);
      }
      return _del(this.getPrefix(), id, cb);
    };

    RedisModel.getJSONString = function(data) {
      var dataWithMetaData;
      dataWithMetaData = this.fillMetaData(data);
      return JSON.stringify(dataWithMetaData);
    };

    RedisModel.deserialize = function(data) {
      return Neo.deserialize(this.Schema, data);
    };

    RedisModel.fillMetaData = function(data) {
      return Neo.fillMetaData(data);
    };

    RedisModel.getPrefix = function() {
      return this.Name;
    };

    return RedisModel;

  })();

}).call(this);
