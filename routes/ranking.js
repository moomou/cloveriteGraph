// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Entity, Logger, Neo, Rank, Ranking, SchemaUtil, Setup, Tag, User, Utility, basicAuthentication, db, hasPermission, iced, redis, __iced_k, __iced_k_noop, _create, _delete, _edit, _show, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  Logger = require('util');

  Setup = require('../models/setup');

  db = Setup.db;

  Neo = require('../models/neo');

  User = require('../models/user');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Ranking = require('../models/ranking');

  Rank = require('../models/rank');

  SchemaUtil = require('../models/stdSchema');

  Constants = SchemaUtil.Constants;

  Utility = require('./utility');

  redis = require('../models/setup').db.redis;

  hasPermission = function(req, res, next, cb) {
    var err, errOther, errUser, other, reqWithUser, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "ranking.coffee",
        funcname: "hasPermission"
      });
      User.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errOther = arguments[0];
            return other = arguments[1];
          };
        })(),
        lineno: 25
      }));
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 26
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errUser || errOther;
      if (err) {
        return cb(true, res.status(500).json({
          error: "Unable to retrieve from neo4j"
        }), req);
      }
      if (!other) {
        return cb(true, res.status(401).json({
          error: "Unable to retrieve from neo4j"
        }), req);
      }
      reqWithUser = _und.extend(_und.clone(req), {
        user: user
      });
      if (user && other && other._node.id === user._node.id) {
        return cb(false, null, reqWithUser);
      }
      return cb(true, res.status(401).json({
        error: "Unauthorized"
      }), req);
    });
  };

  basicAuthentication = Utility.authCurry(hasPermission);

  _create = function(req, res, next) {
    var entities, entity, err, errs, id, ind, rank, rankLinks, ranking, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!req.body.name || !req.body.ranks) {
      return res.status(400).json({
        err: "Missing required param name or ranks"
      });
    }
    req.body.createdBy = req.user._node.data.username;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "ranking.coffee",
        funcname: "_create"
      });
      Ranking.getOrCreate(req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return ranking = arguments[1];
          };
        })(),
        lineno: 53
      }));
      __iced_deferrals._fulfill();
    })(function() {
      Utility.getOrCreateLink(Rank, req.user._node, ranking._node, Constants.REL_RANKING, {}, function(err, rel) {});
      errs = [];
      entities = [];
      (function(__iced_k) {
        var _i, _len, _ref;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "ranking.coffee",
          funcname: "_create"
        });
        _ref = ranking.serialize().ranks;
        for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
          id = _ref[ind];
          Entity.get(id, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, ind, entities, ind),
            lineno: 66
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        errs = [];
        rankLinks = [];
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "ranking.coffee",
            funcname: "_create"
          });
          for (rank = _i = 0, _len = entities.length; _i < _len; rank = ++_i) {
            entity = entities[rank];
            Utility.getOrCreateLink(Rank, ranking._node, entity._node, Constants.REL_RANK, {
              rank: rank + 1,
              rankingName: ranking.serialize().name
            }, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                return function() {
                  __slot_1[__slot_2] = arguments[0];
                  return __slot_3[__slot_4] = arguments[1];
                };
              })(errs, rank, rankLinks, rank),
              lineno: 76
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          return res.status(201).json(ranking.serialize());
        });
      });
    });
  };

  exports.create = basicAuthentication(_create);

  _show = function(req, res, next) {
    var err, ranking, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "ranking.coffee",
        funcname: "_show"
      });
      Ranking.get(req.params.rankingId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return ranking = arguments[1];
          };
        })(),
        lineno: 85
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      return res.json(ranking.serialize());
    });
  };

  exports.show = basicAuthentication(_show);

  _edit = function(req, res, next) {
    var entities, entity, entityId, err, errR, errs, ind, newRankIds, newRanking, oldRanking, rankMap, ranking, rel, rels, removedRankIds, updateRankIds, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (!req.body.name || !req.body.ranks) {
      return res.status(400).json({
        err: "Missing required param name or ranks"
      });
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "ranking.coffee",
        funcname: "_edit"
      });
      Ranking.get(req.params.rankingId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errR = arguments[0];
            return ranking = arguments[1];
          };
        })(),
        lineno: 97
      }));
      __iced_deferrals._fulfill();
    })(function() {
      oldRanking = _und.clone(ranking.serialize());
      if (errR) {
        return res.status(400).json({
          err: errR
        });
      }
      req.body.createdBy = req.user._node.data.username;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "ranking.coffee",
          funcname: "_edit"
        });
        Ranking.put(req.params.rankingId, req.body, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errR = arguments[0];
              return ranking = arguments[1];
            };
          })(),
          lineno: 103
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _ref, _results;
        if (errR) {
          return res.status(400).json({
            err: errR
          });
        }
        newRanking = _und.clone(ranking.serialize());
        console.log("Old Ranking");
        console.log(oldRanking);
        console.log("New Ranking");
        console.log(newRanking);
        rankMap = _und.object(newRanking.ranks, (function() {
          _results = [];
          for (var _i = 1, _ref = newRanking.ranks.length; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this));
        console.log("RankMap");
        console.log(rankMap);
        removedRankIds = _und.difference(oldRanking.ranks, newRanking.ranks);
        console.log("To Remove");
        console.log(removedRankIds);
        entities = [];
        (function(__iced_k) {
          var _j, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "ranking.coffee",
            funcname: "_edit"
          });
          for (ind = _j = 0, _len = removedRankIds.length; _j < _len; ind = ++_j) {
            entityId = removedRankIds[ind];
            Entity.get(entityId, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  err = arguments[0];
                  return __slot_1[__slot_2] = arguments[1];
                };
              })(entities, ind),
              lineno: 129
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            var _j, _len;
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "ranking.coffee",
              funcname: "_edit"
            });
            for (ind = _j = 0, _len = entities.length; _j < _len; ind = ++_j) {
              entity = entities[ind];
              Utility.deleteLink(Rank, ranking._node, entity._node, Constants.REL_RANK);
            }
            __iced_deferrals._fulfill();
          })(function() {
            newRankIds = _und.difference(newRanking.ranks, oldRanking.ranks);
            console.log("To Add");
            console.log(newRankIds);
            entities = [];
            (function(__iced_k) {
              var _j, _len;
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "ranking.coffee",
                funcname: "_edit"
              });
              for (ind = _j = 0, _len = newRankIds.length; _j < _len; ind = ++_j) {
                entityId = newRankIds[ind];
                Entity.get(entityId, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1, __slot_2) {
                    return function() {
                      err = arguments[0];
                      return __slot_1[__slot_2] = arguments[1];
                    };
                  })(entities, ind),
                  lineno: 144
                }));
              }
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                var _j, _len;
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "ranking.coffee",
                  funcname: "_edit"
                });
                for (ind = _j = 0, _len = entities.length; _j < _len; ind = ++_j) {
                  entity = entities[ind];
                  Utility.getOrCreateLink(Rank, ranking._node, entity._node, Constants.REL_RANK, {
                    rank: rankMap[entity._node.id.toString()],
                    rankingName: newRanking.name
                  }, function(err, rel) {});
                }
                __iced_deferrals._fulfill();
              })(function() {
                updateRankIds = _und.intersection(newRanking.ranks, oldRanking.ranks);
                console.log("To Update");
                console.log(updateRankIds);
                entities = [];
                (function(__iced_k) {
                  var _j, _len;
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "ranking.coffee",
                    funcname: "_edit"
                  });
                  for (ind = _j = 0, _len = updateRankIds.length; _j < _len; ind = ++_j) {
                    entityId = updateRankIds[ind];
                    Entity.get(entityId, __iced_deferrals.defer({
                      assign_fn: (function(__slot_1, __slot_2) {
                        return function() {
                          err = arguments[0];
                          return __slot_1[__slot_2] = arguments[1];
                        };
                      })(entities, ind),
                      lineno: 161
                    }));
                  }
                  __iced_deferrals._fulfill();
                })(function() {
                  errs = [];
                  rels = [];
                  (function(__iced_k) {
                    var _j, _len;
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "ranking.coffee",
                      funcname: "_edit"
                    });
                    for (ind = _j = 0, _len = entities.length; _j < _len; ind = ++_j) {
                      entity = entities[ind];
                      console.log("for entity " + entity._node.id + "@" + rankMap[entity._node.id.toString()]);
                      Utility.updateLink(Rank, ranking._node, entity._node, Constants.REL_RANK, {
                        rank: rankMap[entity._node.id.toString()],
                        rankingName: newRanking.name
                      }, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            err = arguments[0];
                            return rel = arguments[1];
                          };
                        })(),
                        lineno: 173
                      }));
                    }
                    __iced_deferrals._fulfill();
                  })(function() {
                    err = _und.find(errs, function(err) {
                      return err;
                    });
                    if (err) {
                      res.status(500).json({
                        err: err
                      });
                    }
                    return res.status(201).json({});
                  });
                });
              });
            });
          });
        });
      });
    });
  };

  exports.edit = basicAuthentication(_edit);

  _delete = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

  exports["delete"] = basicAuthentication(_delete);

}).call(this);
