// Generated by IcedCoffeeScript 1.6.3-e

/*
# Contains useful function for manipulating entity
*/

(function() {
  var Attribute, Constants, Data, Entity, Link, Neo, SchemaUtil, THRESHOLD, Tag, User, Utility, iced, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  SchemaUtil = require('../../models/stdSchema');

  Constants = SchemaUtil.Constants;

  Neo = require('../../models/neo');

  User = require('../../models/user');

  Entity = require('../../models/entity');

  Data = require('../../models/data');

  Attribute = require('../../models/attribute');

  Tag = require('../../models/tag');

  Link = require('../../models/link');

  Utility = require('../utility');

  exports.getEntityAttributes = function(entity, cb) {
    var attrBlobs, blob, err, ind, linkData, node, nodes, rels, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    rels = [];
    attrBlobs = [];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "util.coffee",
        funcname: "getEntityAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 27
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "util.coffee",
          funcname: "getEntityAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          startendVal = Utility.getStartEndIndex(node.id, Constants.REL_ATTRIBUTE, entity._node.id);
          Link.find('startend', startendVal, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(rels, ind),
            lineno: 37
          }));
          (new Attribute(node)).serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(attrBlobs, ind),
            lineno: 38
          }), entity._node.id);
        }
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        for (ind = _i = 0, _len = attrBlobs.length; _i < _len; ind = ++_i) {
          blob = attrBlobs[ind];
          if (rels[ind] && !rels[ind]._node.data.disabled) {
            linkData = {
              linkData: rels[ind].serialize()
            };
            _und.extend(blob, linkData);
          }
        }
        attrBlobs = _und(attrBlobs).filter(function(i) {
          return !_und(i.linkData).isEmpty();
        });
        return cb(attrBlobs);
      });
    });
  };

  exports.getEntityData = function(entity, cb) {
    var dataNode, err, ind, node, nodes, sDataBlob, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "util.coffee",
        funcname: "getEntityData"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_DATA,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 51
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      sDataBlob = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "util.coffee",
          funcname: "getEntityData"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          dataNode = new Data(node);
          sDataBlob.push(dataNode.serialize());
        }
        __iced_deferrals._fulfill();
      })(function() {
        return cb(sDataBlob);
      });
    });
  };

  exports.getEntityRanking = function(entity, cb) {};

  THRESHOLD = 10;

  exports.cleanAttributes = function(entity, cb) {
    var cypher, err, ind, node, nodes, now, rel, rels, startendVal, vote, votesPerAttribute, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "util.coffee",
        funcname: "cleanAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 69
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      cypher = ["START s=node({entityId}), e=node({attrId})", "MATCH s-[r:" + Constants.REL_VOTED + "]-e", "RETURN COUNT(r) AS count;"];
      votesPerAttribute = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "util.coffee",
          funcname: "cleanAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          Neo.query(null, cypher.join("\n"), {
            entityId: entity._node.id,
            attrId: node.id
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(votesPerAttribute, ind),
            lineno: 82
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        now = new Date().getTime() / 1000;

        /*
        # The logic here should be if an attribute is over 10800 (3 days) old
        # and has no votes more than 2, remove link by marking as disabled
        */
        console.log(votesPerAttribute);
        rels = {};
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "util.coffee",
            funcname: "cleanAttributes"
          });
          for (ind = _i = 0, _len = votesPerAttribute.length; _i < _len; ind = ++_i) {
            vote = votesPerAttribute[ind];
            vote = vote[0];
            if (vote.count < THRESHOLD) {
              console.log("examining...");
              console.log(now - nodes[ind].data.createdAt);
              if (now - nodes[ind].data.createdAt >= 10800) {
                startendVal = Utility.getStartEndIndex(nodes[ind].id, Constants.REL_ATTRIBUTE, entity._node.id);
                Link.find('startend', startendVal, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1, __slot_2) {
                    return function() {
                      err = arguments[0];
                      return __slot_1[__slot_2] = arguments[1];
                    };
                  })(rels, ind),
                  lineno: 103
                }));
              }
            }
          }
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len, _ref;
          _ref = _und(rels).values();
          for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
            rel = _ref[ind];
            console.log(rel);
            rel._node.data.disabled = true;
            console.log(rel);
            rel.save();
          }
          return cb();
        });
      });
    });
  };

}).call(this);
