// Generated by IcedCoffeeScript 1.6.3-e

/*
# Contains useful function for manipulating entity
*/

(function() {
  var Attribute, Constants, Entity, Link, SchemaUtil, Tag, User, Utility, iced, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  SchemaUtil = require('../../models/stdSchema');

  Constants = SchemaUtil.Constants;

  User = require('../../models/user');

  Entity = require('../../models/entity');

  Attribute = require('../../models/attribute');

  Tag = require('../../models/tag');

  Link = require('../../models/link');

  Utility = require('../utility');

  exports.getEntityAttributes = function(entity, cb) {
    var attrBlobs, blob, err, ind, linkData, node, nodes, rels, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    rels = [];
    attrBlobs = [];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity/util.coffee",
        funcname: "getEntityAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 23
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity/util.coffee",
          funcname: "getEntityAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          startendVal = Utility.getStartEndIndex(node.id, Constants.REL_ATTRIBUTE, entity._node.id);
          Link.find('startend', startendVal, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(rels, ind),
            lineno: 33
          }));
          (new Attribute(node)).serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(attrBlobs, ind),
            lineno: 34
          }), entity._node.id);
        }
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        for (ind = _i = 0, _len = attrBlobs.length; _i < _len; ind = ++_i) {
          blob = attrBlobs[ind];
          if (rels[ind]) {
            linkData = {
              linkData: rels[ind].serialize()
            };
          } else {
            linkData = {
              linkData: {}
            };
          }
          _und.extend(blob, linkData);
        }
        console.log(attrBlobs);
        return cb(attrBlobs);
      });
    });
  };

}).call(this);
