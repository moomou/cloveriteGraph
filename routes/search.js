// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Attribute, Constants, Entity, Neo, Response, StdSchema, Tag, VoteLink, attrSplit, queryAnalyzer, relSplit, searchBasic, _und;



  _und = require('underscore');

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  VoteLink = require('../models/votelink');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  StdSchema = require('../models/stdSchema');

  Constants = StdSchema.Constants;

  Response = StdSchema;

  attrSplit = /\bwith\b/;

  relSplit = /\bat\b/;

  exports.searchHandler = function(req, res, next) {
    var indexName, query, _ref;
    indexName = (_ref = req.params.type) != null ? _ref : 'entity';
    query = "name:" + req.query['q'];
    return Neo.search(Entity, indexName, query, function(err, objs) {
      return res.json(_und.map(objs, function(obj) {
        return obj.serialize();
      }));
    });
  };

  queryAnalyzer = function(query) {
    var attrQuery, entityQuery, remainder, _ref, _ref1;
    _ref = query.split(attrSplit), entityQuery = _ref[0], remainder = _ref[1];
    return _ref1 = remainder.split(relSplit), attrQuery = _ref1[0], remainder = _ref1[1], _ref1;
    /*
    query = [
        'START user=node({userId})',
        'MATCH (user)<-[:REL_ATTRIBUTE]-(attributes)',
        'RETURN attributes, count(attributes)'
    ].join('\n').replace('REL_ATTRIBUTE', REL_ATTRIBUTE)
    */

  };

  searchBasic = function(Class, indexName, query, cb) {
    return Neo.search(Class, indexName, query, cb);
  };

}).call(this);
