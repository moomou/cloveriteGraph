// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Attribute, Constants, Entity, Neo, Response, StdSchema, Tag, Vote, attrSplit, cypherQueryConstructor, iced, luceneQueryContructor, queryAnalyzer, relSplit, searchFunc, searchableClass, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  require('source-map-support').install();

  _und = require('underscore');

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  Vote = require('../models/vote');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  StdSchema = require('../models/stdSchema');

  Constants = StdSchema.Constants;

  Response = StdSchema;

  attrSplit = /\bwith\b/;

  relSplit = /\bat\b/;

  searchableClass = {
    entity: Entity,
    attribute: Attribute,
    tag: Tag
  };

  searchFunc = {
    cypher: Neo.query,
    lucene: Neo.search
  };

  queryAnalyzer = function(query) {
    var attrQuery, mainQuery, relQuery, remainder, _ref, _ref1;
    mainQuery = attrQuery = relQuery = '';
    console.log("query: " + query);
    _ref = query.split(attrSplit), mainQuery = _ref[0], remainder = _ref[1];
    console.log("mQuery: " + mainQuery);
    if (remainder) {
      _ref1 = remainder.split(relSplit), attrQuery = _ref1[0], remainder = _ref1[1];
    }
    console.log("attrQuery: " + attrQuery);
    console.log("relQuery: " + remainder);
    if (!!mainQuery) {
      mainQuery = mainQuery.trim();
    }
    if (!!attrQuery) {
      attrQuery = attrQuery.split(' ').map(function(item) {
        return item.trim();
      }).filter(function(item) {
        if (!!item) {
          return item;
        }
      });
    }
    if (!!remainder) {
      relQuery = remainder.split(' ').map(function(item) {
        return item.trim();
      }).filter(function(item) {
        if (!!item) {
          return item;
        }
      });
    }
    return cypherQueryConstructor(mainQuery, attrQuery, relQuery);
  };

  cypherQueryConstructor = function(name, attrMatches, relMatches) {
    var attrMatchQ, attrName, endQ, ind, relMatchQ, relName, startNodeQ, _i, _j, _len, _len1;
    if (name == null) {
      name = '';
    }
    if (attrMatches == null) {
      attrMatches = [];
    }
    if (relMatches == null) {
      relMatches = [];
    }
    console.log("name: " + name);
    console.log("attrMatches: " + attrMatches);
    console.log("relMatches: " + relMatches);
    startNodeQ = "START n=node:__indexName__('name:" + name + "~0.65')";
    endQ = 'RETURN DISTINCT n AS result;';
    attrMatchQ = [];
    relMatchQ = [];
    for (ind = _i = 0, _len = attrMatches.length; _i < _len; ind = ++_i) {
      attrName = attrMatches[ind];
      attrMatchQ.push("MATCH (n)<-[:_ATTRIBUTE]-(attribute) WHERE attribute.name=~'(?i)" + attrName + "'");
    }
    attrMatchQ = attrMatchQ.join(' WITH n as n ');
    for (ind = _j = 0, _len1 = relMatches.length; _j < _len1; ind = ++_j) {
      relName = relMatches[ind];
      relMatchQ.push("MATCH (n)-[r]->(related) WHERE related.name=~'(?i)" + relName + "'");
    }
    relMatchQ = relMatchQ.join(' WITH n as n ');
    return ['cypher', [startNodeQ, attrMatchQ, "WITH n as n", relMatchQ, endQ].join('\n')];
  };

  luceneQueryContructor = function(query) {
    var key, queryString, val, _i, _len;
    queryString = [];
    for (val = _i = 0, _len = query.length; _i < _len; val = ++_i) {
      key = query[val];
      queryString.push("" + key + ":" + val);
    }
    return queryString.join("AND");
  };

  exports.searchHandler = function(req, res, next) {
    var blobResults, err, ind, indX, indY, obj, query, queryType, result, results, search, searchClass, searchClassBlob, searchClasses, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (req.params.type) {
      searchClasses = [searchableClass[req.params.type]];
    } else {
      searchClasses = searchableClass;
    }
    _ref = queryAnalyzer(req.query['q']), queryType = _ref[0], query = _ref[1];
    search = searchFunc[queryType];
    console.log("CYPHER_QUERY: " + query);
    results = [];
    (function(__iced_k) {
      var _i, _len;
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "search.coffee",
        funcname: "searchHandler"
      });
      for (ind = _i = 0, _len = searchClasses.length; _i < _len; ind = ++_i) {
        searchClass = searchClasses[ind];
        search(searchClass, query.replace('__indexName__', searchClass.INDEX_NAME), {}, __iced_deferrals.defer({
          assign_fn: (function(__slot_1, __slot_2) {
            return function() {
              err = arguments[0];
              return __slot_1[__slot_2] = arguments[1];
            };
          })(results, ind),
          lineno: 100
        }));
      }
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _j, _len, _len1;
      blobResults = {};
      for (indX = _i = 0, _len = results.length; _i < _len; indX = ++_i) {
        result = results[indX];
        searchClassBlob = [];
        for (indY = _j = 0, _len1 = result.length; _j < _len1; indY = ++_j) {
          obj = result[indY];
          searchClassBlob.push((new searchClasses[indX](obj.result)).serialize());
        }
        blobResults[searchClasses[indX].Name] = searchClassBlob;
      }
      return res.json(blobResults);
    });
  };

}).call(this);

/*
//@ sourceMappingURL=search.map
*/
