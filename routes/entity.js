// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Attribute, Constants, Entity, Neo, Response, iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Constants = require('../models/stdSchema');

  Response = require('../models/stdSchema');

  exports.create = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "create"
      });
      Entity.create(req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 11
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      return res.status(201).json(entity.serialize());
    });
  };

  exports.search = function(req, res, next) {};

  exports.show = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "show"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 21
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      return res.json(entity.serialize());
    });
  };

  exports.edit = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "edit"
      });
      Entity.put(req.params.id, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 27
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      return res.json(entity.serialize());
    });
  };

  exports.del = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "del"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 34
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "del"
        });
        entity.del(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 37
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return next(err);
        }
        res.statusCode = 204;
        return res.send();
      });
    });
  };

  exports.addAttribute = function(req, res, next) {
    var attr, entity, err, errA, errE, errorRes, rel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "addAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 47
      }));
      Attribute.getOrCreate(req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 48
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errE || errA) {
        errorRes = Response.ErrorResponse("Error Occured", "Unknown");
        return res.statusCode(500).json(errorRes.serialize());
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "addAttribute"
        });
        attr._node.createRelationshipTo(entity._node, Constants.REL_ATTRIBUTE, {}, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return rel = arguments[1];
            };
          })(),
          lineno: 60
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return res.status(201).json((new Neo(rel)).serialize());
      });
    });
  };

  exports.delAttribute = function(req, res, next) {
    var attr, entity, errA, errE, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "delAttribute"
      });
      Entity.get(req.params.eId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 66
      }));
      __iced_deferrals._fulfill();
    })(function() {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "delAttribute"
      });
      Attribute.get(req.params.aId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 67
      }));
      __iced_deferrals._fulfill();
    });
  };

  exports.listAttribute = function(req, res, next) {
    var entity, err, errE, node, nodes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "listAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 71
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "listAttribute"
        });
        entity._node.getRelationshipNodes({
          type: Constants.REL_ATTRIBUTE,
          direction: 'in'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 74
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return res.json((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = nodes.length; _i < _len; _i++) {
            node = nodes[_i];
            _results.push((new Attribute(node)).serialize());
          }
          return _results;
        })());
      });
    });
  };

  exports.voteAttribute = function(req, res, next) {
    var attr, entity, errA, errE, vote, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "voteAttribute"
      });
      Entity.get(req.params.eId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 80
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "voteAttribute"
        });
        Attribute.get(req.params.aId, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errA = arguments[0];
              return attr = arguments[1];
            };
          })(),
          lineno: 81
        }));
        __iced_deferrals._fulfill();
      })(function() {
        vote = new VoteLink(req.body);
        return entity.vote(attr, vote(function(err) {
          if (err) {
            return res.statusCode(500);
          }
          return res.send();
        }));
      });
    });
  };

  exports.relation = function(req, res, next) {
    var entity, err, other, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "relation"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 92
      }));
      Entity.get(req.body.otherId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return other = arguments[1];
          };
        })(),
        lineno: 93
      }));
      __iced_deferrals._fulfill();
    })(function() {
      switch (req.body.action) {
        case "add":
          return entity.linkEntity(other, req.params.relation, function(err) {
            return console.log(err);
          });
        case "remove":
          return entity.unlinkEntity(other, req.params.relation, function(err) {
            return console.log(err);
          });
      }
    });
  };

}).call(this);
