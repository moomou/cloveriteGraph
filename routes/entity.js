// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Comment, Constants, Entity, Link, Logger, Neo, SchemaUtil, Search, Tag, User, Utility, Vote, basicAuthentication, getDiscussionId, getJSONData, getOutgoingRelsCypherQuery, getRelationId, hasPermission, iced, redis, rest, __iced_k, __iced_k_noop, _addAttribute, _addComment, _del, _delAttribute, _delComment, _edit, _getAttribute, _listAttribute, _listComment, _show, _showUsers, _und, _updateAttributeLink;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  rest = require('restler');

  Logger = require('util');

  Neo = require('../models/neo');

  User = require('../models/user');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Vote = require('../models/vote');

  Link = require('../models/link');

  Comment = require('../models/comment');

  SchemaUtil = require('../models/stdSchema');

  Constants = SchemaUtil.Constants;

  Search = require('./search');

  Utility = require('./utility');

  redis = require('../models/setup').db.redis;

  getOutgoingRelsCypherQuery = function(startId, relType) {
    var cypher;
    cypher = "START n=node(" + startId + ") MATCH n-[r]->other ";
    if (relType === "relation") {
      cypher += "WHERE type(r) <> " + Constants.REL_VOTED + " ";
    } else {
      cypher += "WHERE type(r) = '" + (Link.normalizeName(relType)) + "'";
    }
    return cypher += " RETURN r;";
  };

  getJSONData = function(remoteAddress, cb) {
    if (!remoteAddress) {
      return cb("N/A");
    }
    return rest.get(remoteAddress).on('complete', function(remoteData, remoteRes) {
      if (remoteRes == null) {
        return cb("");
      } else if ((remoteRes != null) && remoteRes.headers['content-type'].indexOf('application/json') !== -1) {
        return cb(remoteData);
      } else {
        return cb("N/A");
      }
    });
  };

  getDiscussionId = function(entityId) {
    return "entity:" + entityId + ":discussion";
  };

  getRelationId = function(path) {
    var splits;
    splits = path.relationships[0]._data.self.split('/');
    return splits[splits.length - 1];
  };

  hasPermission = function(req, res, next, cb) {
    var authorized, entity, err, errEntity, errUser, reqWithUser, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (isNaN(req.params.id)) {
      cb(true, res.status(400).json({
        error: "Missing param id"
      }), null);
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "hasPermission"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errEntity = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 60
      }));
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 61
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errUser || errEntity;
      if (err) {
        return cb(true, res.status(500).json({
          error: "Unable to retrieve from neo4j"
        }), null);
      }
      if (!entity._node.data["private"] && !user) {
        return cb(false, null, req);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "hasPermission"
        });
        Utility.hasPermission(user, entity, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return authorized = arguments[1];
            };
          })(),
          lineno: 69
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return cb(true, res.status(500).json({
            error: "Permission check failed"
          }), null);
        }
        if (!authorized) {
          return cb(true, res.status(401).json({
            error: "Permission Denied"
          }), null);
        }
        reqWithUser = _und.extend(_und.clone(req), {
          user: user
        });
        return cb(false, null, reqWithUser);
      });
    });
  };

  basicAuthentication = Utility.authCurry(hasPermission);

  exports.search = function(req, res, next) {
    return Search.searchHandler(req, res, next);
  };


  /*
  # Entity section
  */

  exports.create = function(req, res, next) {
    var blob, entity, err, errs, ind, linkData, rels, tagName, tagObj, tagObjs, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "create"
      });
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 92
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      if (!user) {
        req.body['private'] = false;
      }
      console.log("Creating Entity");
      errs = [];
      tagObjs = [];
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "create"
        });
        Entity.create(req.body, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return entity = arguments[1];
            };
          })(),
          lineno: 104
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          var _i, _len, _ref;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "create"
          });
          _ref = entity.serialize().tags;
          for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
            tagName = _ref[ind];
            Tag.getOrCreate(tagName, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                return function() {
                  __slot_1[__slot_2] = arguments[0];
                  return __slot_3[__slot_4] = arguments[1];
                };
              })(errs, ind, tagObjs, ind),
              lineno: 108
            }));
          }
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len;
          err = err || _und.find(errs, function(err) {
            return err;
          });
          if (err) {
            return next(err);
          }
          linkData = Link.fillMetaData({});
          for (ind = _i = 0, _len = tagObjs.length; _i < _len; ind = ++_i) {
            tagObj = tagObjs[ind];
            Utility.createLink(tagObj._node, entity._node, Constants.REL_TAG, linkData, function(err, rel) {});
            if (user) {
              Utility.createLink(user._node, tagObj._node, Constants.REL_TAG, linkData, function(err, rel) {});
            }
          }
          (function(__iced_k) {
            if (user) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "entity.coffee",
                  funcname: "create"
                });
                Utility.createMultipleLinks(user._node, entity._node, [Constants.REL_CREATED, Constants.REL_ACCESS, Constants.REL_MODIFIED], linkData, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return rels = arguments[1];
                    };
                  })(),
                  lineno: 134
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "create"
              });
              entity.serialize(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return blob = arguments[0];
                  };
                })(),
                lineno: 136
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return res.status(201).json(blob);
            });
          });
        });
      });
    });
  };

  _show = function(req, res, next) {
    var attrBlobs, entity, entityBlob, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_show"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 141
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      (function(__iced_k) {
        if (req.query['attr'] !== "false") {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "entity.coffee",
              funcname: "_show"
            });
            Utility.getEntityAttributes(entity, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return attrBlobs = arguments[0];
                };
              })(),
              lineno: 146
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(entityBlob = entity.serialize(null, {
              attributes: attrBlobs
            }));
          });
        } else {
          return __iced_k(entityBlob = entity.serialize(null, entityBlob));
        }
      })(function() {
        return res.json(entityBlob);
      });
    });
  };

  exports.show = basicAuthentication(_show);

  _edit = function(req, res, next) {
    var blob, entity, err, errMsg, errs, ind, linkData, pathExists, tagName, tagObj, tagObjs, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_edit"
      });
      Entity.put(req.params.id, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errMsg = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 157
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errMsg) {
        return res.status(400).json({
          error: errMsg,
          input: req.body
        });
      }
      errs = [];
      tagObjs = [];
      (function(__iced_k) {
        var _i, _len, _ref;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_edit"
        });
        _ref = entity.serialize().tags;
        for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
          tagName = _ref[ind];
          Tag.getOrCreate(tagName, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, ind, tagObjs, ind),
            lineno: 165
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        err = _und.find(errs, function(err) {
          return err;
        });
        if (err) {
          return next(err);
        }
        linkData = Link.fillMetaData({});
        (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = tagObjs;
          _len = _ref.length;
          ind = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++ind;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(ind < _len)) {
              return _break();
            } else {
              tagObj = _ref[ind];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "entity.coffee",
                  funcname: "_edit"
                });
                Utility.hasLink(tagObj._node, entity._node, Constants.REL_ATTRIBUTE, "all", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return pathExists = arguments[1];
                    };
                  })(),
                  lineno: 180
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(!pathExists ? Utility.createLink(tagObj._node, entity._node, Constants.REL_TAG, linkData, function(err, rel) {}) : void 0);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "entity.coffee",
              funcname: "_edit"
            });
            entity.serialize(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return blob = arguments[0];
                };
              })(),
              lineno: 189
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return res.json(blob);
          });
        });
      });
    });
  };

  exports.edit = basicAuthentication(_edit);

  _del = function(req, res, next) {
    var entity, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_del"
      });
      Entity.put(req.params.id, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 196
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_del"
        });
        Entity.get(req.params.id, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return entity = arguments[1];
            };
          })(),
          lineno: 199
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return next(err);
        }
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "_del"
          });
          entity.del(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 202
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            return next(err);
          }
          return res.status(204).send();
        });
      });
    });
  };

  exports.del = basicAuthentication(_del);


  /*
  # Entity Use Section
  */

  _showUsers = function(req, res, next) {
    var blobs, entity, err, ind, node, nodes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_showUsers"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 213
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_showUsers"
        });
        entity._node.getRelationshipNodes({
          type: Constants.REL_MODIFIED,
          direction: 'in'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 218
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        if (err) {
          return next(err);
        }
        blobs = [];
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          blobs[ind] = (new User(node)).serialize();
        }
        return res.json(blobs);
      });
    });
  };

  exports.showUsers = basicAuthentication(_showUsers);


  /*
  # Entity Attribute Section
  */

  _listAttribute = function(req, res, next) {
    var blob, blobs, entity, err, errE, ind, linkData, node, nodes, rels, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_listAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 236
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return next(err);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_listAttribute"
        });
        entity._node.getRelationshipNodes({
          type: Constants.REL_ATTRIBUTE,
          direction: 'in'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 241
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return next(err);
        }
        rels = [];
        blobs = [];
        (function(__iced_k) {
          var _i, _len;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "entity.coffee",
            funcname: "_listAttribute"
          });
          for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
            node = nodes[ind];
            startendVal = Utility.getStartEndIndex(node.id, Constants.REL_ATTRIBUTE, req.params.id);
            Link.find('startend', startendVal, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  err = arguments[0];
                  return __slot_1[__slot_2] = arguments[1];
                };
              })(rels, ind),
              lineno: 255
            }));
            (new Attribute(node)).serialize(__iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2) {
                return function() {
                  return __slot_1[__slot_2] = arguments[0];
                };
              })(blobs, ind),
              lineno: 256
            }), entity._node.id);
          }
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len;
          for (ind = _i = 0, _len = blobs.length; _i < _len; ind = ++_i) {
            blob = blobs[ind];
            if (rels[ind]) {
              linkData = {
                linkData: rels[ind].serialize()
              };
            } else {
              linkData = {
                linkData: {}
              };
            }
            _und.extend(blob, linkData);
          }
          return res.json(blobs);
        });
      });
    });
  };

  exports.listAttribute = basicAuthentication(_listAttribute);

  _addAttribute = function(req, res, next) {
    var attr, blob, data, entity, err, errA, errE, existingLinkData, link, linkData, path, rel, relId, valid, value, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    valid = Attribute.validateSchema(req.body);
    if (!valid) {
      return res.status(400).json({
        error: "Invalid input",
        input: req.body
      });
    }
    data = _und.clone(req.body);
    delete data['id'];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_addAttribute"
      });
      Entity.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 281
      }));
      Attribute.getOrCreate(data, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 282
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errE || errA;
      if (err) {
        return next(err);
      }
      linkData = Link.normalizeData(_und.clone(req.body || {}));
      linkData['startend'] = Utility.getStartEndIndex(attr._node.id, Constants.REL_ATTRIBUTE, req.params.id);
      console.log("__NEW__");
      console.log(linkData);
      console.log("__END__");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_addAttribute"
        });
        Utility.hasLink(entity._node, attr._node, Constants.REL_ATTRIBUTE, "all", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return path = arguments[1];
            };
          })(),
          lineno: 303
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (path) {
            relId = getRelationId(path);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "_addAttribute"
              });
              Link.get(relId, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return link = arguments[1];
                  };
                })(),
                lineno: 310
              }));
              __iced_deferrals._fulfill();
            })(function() {
              existingLinkData = link.serialize();
              console.log("__EXISTING__");
              console.log(existingLinkData);
              console.log("__END__");
              (function(__iced_k) {
                if (existingLinkData.srcURL !== linkData.srcURL) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "entity.coffee",
                      funcname: "_addAttribute"
                    });
                    getJSONData(linkData.srcURL, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return value = arguments[0];
                        };
                      })(),
                      lineno: 319
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    linkData.value = value;
                    return __iced_k(linkData.type = !isNaN(value) ? Constants.ATTR_NUMERIC : Constants.ATTR_REFERENCE);
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                linkData = _und.extend(existingLinkData, linkData);
                console.log("__MERGED__");
                console.log(linkData);
                console.log("__END__");
                Link.put(relId, linkData, function() {});
                return __iced_k(rel = path.relationships[0]);
              });
            });
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "entity.coffee",
                funcname: "_addAttribute"
              });
              getJSONData(linkData.srcURL, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return value = arguments[0];
                  };
                })(),
                lineno: 333
              }));
              __iced_deferrals._fulfill();
            })(function() {
              linkData.value = value;
              linkData.type = !isNaN(value) ? Constants.ATTR_NUMERIC : Constants.ATTR_REFERENCE;
              linkData = Link.fillMetaData(linkData);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "entity.coffee",
                  funcname: "_addAttribute"
                });
                Utility.createLink(attr._node, entity._node, Constants.REL_ATTRIBUTE, linkData, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return rel = arguments[1];
                    };
                  })(),
                  lineno: 343
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (err) {
                  return next(err);
                }
                return __iced_k();
              });
            });
          }
        })(function() {
          Link.index(rel, linkData);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "entity.coffee",
              funcname: "_addAttribute"
            });
            attr.serialize(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return blob = arguments[0];
                };
              })(),
              lineno: 349
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _und.extend(blob, {
              linkData: linkData
            });
            return res.status(201).json(blob);
          });
        });
      });
    });
  };

  exports.addAttribute = basicAuthentication(_addAttribute);

  _delAttribute = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

  exports.delAttribute = basicAuthentication(_delAttribute);

  _getAttribute = function(req, res, next) {
    var attr, attrId, blob, entityId, err, errAttr, errLink, rel, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    entityId = req.params.eId;
    attrId = req.params.aId;
    if (!attrId) {
      return res.status(401).json({
        error: "Missing attribute id"
      });
    }
    startendVal = Utility.getStartEndIndex(attrId, Constants.REL_ATTRIBUTE, entityId);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_getAttribute"
      });
      Link.find('startend', startendVal, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errLink = arguments[0];
            return rel = arguments[1];
          };
        })(),
        lineno: 374
      }));
      Attribute.get(attrId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errAttr = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 375
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errLink || errAttr;
      if (err) {
        return next(err);
      }
      blob = {};
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "_getAttribute"
        });
        attr.serialize(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return blob = arguments[0];
            };
          })(),
          lineno: 381
        }), entityId);
        __iced_deferrals._fulfill();
      })(function() {
        _und.extend(blob, {
          linkData: rel.serialize()
        });
        return res.json(blob);
      });
    });
  };

  exports.getAttribute = basicAuthentication(_getAttribute);

  _updateAttributeLink = function(req, res, next) {
    var attr, attrId, blob, entityId, err, errAttr, errLink, linkData, rel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    entityId = req.params.eId;
    attrId = req.params.aId;
    linkData = _und.clone(req.body['linkData'] || {});
    if (!attrId) {
      return res.status(401).json({
        error: "Missing attribute id"
      });
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_updateAttributeLink"
      });
      Attribute.get(attrId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errAttr = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 397
      }));
      Link.put(linkData['id'], linkData, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errLink = arguments[0];
            return rel = arguments[1];
          };
        })(),
        lineno: 398
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errAttr || errLink;
      if (err) {
        return next(err);
      }
      blob = attr.serialize();
      _und.extend(blob, {
        linkData: rel.serialize()
      });
      return res.json(blob);
    });
  };

  exports.updateAttributeLink = basicAuthentication(_updateAttributeLink);

  exports.voteAttribute = function(req, res, next) {
    var attr, entity, err, errA, errE, errUser, user, vote, voteData, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "voteAttribute"
      });
      Entity.get(req.params.eId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errE = arguments[0];
            return entity = arguments[1];
          };
        })(),
        lineno: 413
      }));
      Attribute.get(req.params.aId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errA = arguments[0];
            return attr = arguments[1];
          };
        })(),
        lineno: 414
      }));
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 415
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errA || errE;
      if (err) {
        return next(err);
      }
      voteData = _und.clone(req.body);
      voteData.ipAddr = req.header['x-real-ip'] || req.connection.remoteAddress;
      voteData.browser = req.useragent.Browser;
      voteData.os = req.useragent.OS;
      voteData.lang = req.headers['accept-language'];
      voteData.attrId = attr.serialize().id;
      voteData.attrName = attr.serialize().name;
      vote = new Vote(voteData);
      console.log(vote);
      return entity.vote(user, attr, vote, function(err, voteTally) {
        if (err) {
          return res.status(500);
        }
        return res.send(voteTally);
      });
    });
  };


  /*
  # Entity Comment Section
  */

  _addComment = function(req, res, next) {
    var cleanedComment, commentObjJson, discussionId, err, result, valid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    valid = Comment.validateSchema(req.body);
    if (!valid) {
      return res.status(400).json({
        error: "Invalid input",
        input: req.body
      });
    }
    cleanedComment = Comment.fillMetaData(Comment.deserialize(req.body));
    cleanedComment.username = req.user ? req.user.firstName + " " + req.user.lastName : "Anonymous";
    cleanedComment.location = req.header['x-real-ip'] || req.connection.remoteAddress;
    discussionId = getDiscussionId(req.params.id);
    commentObjJson = JSON.stringify(cleanedComment);
    console.log(commentObjJson);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_addComment"
      });
      redis.lpush(discussionId, commentObjJson, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 456
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return res.status(500).json({
          error: "Unable to save comment"
        });
      }
      if (result) {
        return res.json(cleanedComment);
      }
    });
  };

  exports.addComment = basicAuthentication(_addComment);

  _listComment = function(req, res, next) {
    var blobs, comment, comments, discussionId, err, ind, startIndex, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    startIndex = (_ref = req.params.start) != null ? _ref : 0;
    discussionId = getDiscussionId(req.params.id);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "_listComment"
      });
      redis.lrange(discussionId, startIndex, startIndex + 25, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return comments = arguments[1];
          };
        })(),
        lineno: 469
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _len;
      blobs = [];
      for (ind = _i = 0, _len = comments.length; _i < _len; ind = ++_i) {
        comment = comments[ind];
        blobs[ind] = JSON.parse(comment);
      }
      return res.json(blobs);
    });
  };

  exports.listComment = basicAuthentication(_listComment);

  _delComment = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

  exports.delComment = basicAuthentication(_delComment);


  /*
  # Entity Relation section
  */

  exports.listRelation = function(req, res, next) {
    var blob, blobs, endId, entityId, err, extraData, ind, query, rel, relType, rels, startId, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    entityId = req.params.id;
    relType = req.params.relation;
    query = getOutgoingRelsCypherQuery(entityId, relType);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "listRelation"
      });
      Neo.query(Link, query, {}, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return rels = arguments[1];
          };
        })(),
        lineno: 497
      }));
      __iced_deferrals._fulfill();
    })(function() {
      blobs = [];
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "entity.coffee",
          funcname: "listRelation"
        });
        for (ind = _i = 0, _len = rels.length; _i < _len; ind = ++_i) {
          rel = rels[ind];
          rel = new Link(rel.r);
          tmp = rel._node._data.start.split('/');
          startId = tmp[tmp.length - 1];
          tmp = rel._node._data.end.split('/');
          endId = tmp[tmp.length - 1];
          extraData = {
            type: rel._node._data.type,
            start: startId,
            end: endId
          };
          rel.serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(blobs, ind),
            lineno: 516
          }), extraData);
        }
        __iced_deferrals._fulfill();
      })(function() {
        return res.json((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = blobs.length; _i < _len; _i++) {
            blob = blobs[_i];
            _results.push(blob);
          }
          return _results;
        })());
      });
    });
  };

  exports.linkEntity = function(req, res, next) {
    var dstEntity, dstToSrcLink, errDst, errSrc, linkData, linkName, relation, srcEntity, srcToDstLink, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "linkEntity"
      });
      Entity.get(req.params.srcId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errSrc = arguments[0];
            return srcEntity = arguments[1];
          };
        })(),
        lineno: 524
      }));
      Entity.get(req.params.dstId, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errDst = arguments[0];
            return dstEntity = arguments[1];
          };
        })(),
        lineno: 525
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errSrc) {
        return next(errSrc);
      }
      if (errDst) {
        return next(errDst);
      }
      relation = req.body;
      if (relation['src_dst']) {
        linkName = Link.normalizeName(relation['src_dst']['name']);
        linkData = Link.deserialize(relation['src_dst']['data']);
        srcToDstLink = Utility.createLink(srcEntity._node, dstEntity._node, linkName, linkData);
      }
      if (relation['dst_src']) {
        linkName = Link.normalizeName(relation['dst_src']['name']);
        linkData = Link.deserialize(relation['dst_src']['data']);
        dstToSrcLink = Utility.createLink(dstEntity._node, srcEntity._node, linkName, linkData);
      }
      return res.status(201).send();
    });
  };

  exports.unlinkEntity = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

}).call(this);
