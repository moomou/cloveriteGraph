// Generated by IcedCoffeeScript 1.6.2d
(function() {
  var Entity, iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Entity = require('../models/entity');

  exports.create = function(req, res, next) {
    var data, tags;
    data = {
      name: req.body['name'],
      description: req.body['description'],
      type: req.body['type']
    };
    tags = req.body['tags'];
    return Entity.create(data, function(err, entity) {
      if (err) {
        return next(err);
      }
      return res.json(entity);
    });
  };

  exports.show = function(req, res, next) {
    return Entity.get(req.params.id, function(err, entity) {
      if (err) {
        return next(err);
      }
      return res.json(entity);
    });
  };

  exports.edit = function(req, res, next) {
    return Entity.get(req.params.id, function(err, entity) {
      if (err) {
        return next(err);
      }
      return res.json(entity);
    });
  };

  exports.del = function(req, res, next) {
    return Entity.get(req.params.id, function(err, entity) {
      if (err) {
        return next(err);
      }
      return entity.del(function(err) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    });
  };

  /*
      Connect another entity to current one using [relation]
      DATA : {
          action: add/rm
          otherId: entityId,
      }
  */


  exports.relation = function(req, res, next) {
    var entity, other, results, save, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    results = [];
    save = function(err, res) {
      return results.push(res);
    };
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "entity.coffee",
        funcname: "relation"
      });
      Entity.get(req.param.id, __iced_deferrals.defer({
        assign_fn: (function(__slot_1, __slot_2) {
          return function() {
            return __slot_1[__slot_2] = arguments[0];
          };
        })(results, 0),
        lineno: 60
      }));
      Entity.get(req.body.otherId, __iced_deferrals.defer({
        assign_fn: (function(__slot_1, __slot_2) {
          return function() {
            return __slot_1[__slot_2] = arguments[0];
          };
        })(results, 1),
        lineno: 61
      }));
      __iced_deferrals._fulfill();
    })(function() {
      entity = results[0], other = results[1];
      switch (req.body.action) {
        case "add":
          return entity.linkEntity(other, req.param.relation, function(err) {
            return console.log(err);
          });
        case "remove":
          return entity.unlinkEntity(other, req.param.relation, function(err) {
            return console.log(err);
          });
      }
    });
  };

  /*
      List all entity related to this entity through [relation]
  */


}).call(this);
