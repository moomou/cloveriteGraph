// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Entity, Link, Logger, Neo, Response, StdSchema, Tag, User, Utility, Vote, getLinkType, hasPermission, iced, rest, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  rest = require('restler');

  Logger = require('util');

  Neo = require('../models/neo');

  User = require('../models/user');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Vote = require('../models/vote');

  Link = require('../models/link');

  StdSchema = require('../models/stdSchema');

  Constants = StdSchema.Constants;

  Response = StdSchema;

  Utility = require('./utility');

  hasPermission = function(req, res, next, cb) {
    var authorized, err, errOther, errUser, other, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "user.coffee",
        funcname: "hasPermission"
      });
      User.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errOther = arguments[0];
            return other = arguments[1];
          };
        })(),
        lineno: 25
      }));
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 26
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = errUser || errOther;
      if (err) {
        return cb(true, res.status(500).json({
          error: "Unable to retrieve from neo4j"
        }));
      }
      if (!other) {
        return cb(true, res.status(401).json({
          error: "Unable to retrieve from neo4j"
        }));
      }
      if (other._node.data.id === other._node.data.id) {
        return cb(false, null);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "user.coffee",
          funcname: "hasPermission"
        });
        Utility.hasPermission(user, other, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return authorized = arguments[1];
            };
          })(),
          lineno: 37
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (err) {
          return cb(true, res.status(500).json({
            error: "Permission check failed"
          }));
        }
        if (!authorized) {
          return cb(true, res.status(401).json({
            error: "Permission Denied"
          }));
        }
        return cb(false, null);
      });
    });
  };

  getLinkType = function(req, res, next, linkType) {
    var blobs, errGetRelationship, errUser, ind, node, nodes, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "user.coffee",
        funcname: "getLinkType"
      });
      Utility.getUser(req, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            errUser = arguments[0];
            return user = arguments[1];
          };
        })(),
        lineno: 44
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (errUser || !user) {
        return next(errUser);
      }
      Logger.debug("Getting linkType: " + linkType);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "user.coffee",
          funcname: "getLinkType"
        });
        user._node.getRelationshipNodes({
          type: linkType,
          direction: 'out'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              errGetRelationship = arguments[0];
              return nodes = arguments[1];
            };
          })(),
          lineno: 51
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        if (errGetRelationship) {
          return next(errGetRelationship);
        }
        blobs = [];
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          blobs[ind] = (new Entity(node)).serialize();
        }
        return res.json(blobs);
      });
    });
  };

  exports.getCreated = function(req, res, next) {
    var err, errRes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "user.coffee",
        funcname: "getCreated"
      });
      hasPermission(req, res, next, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return errRes = arguments[1];
          };
        })(),
        lineno: 62
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return errRes;
      }
      return getLinkType(req, res, next, Constants.REL_CREATED);
    });
  };

  exports.getVoted = function(req, res, next) {
    var err, errRes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "user.coffee",
        funcname: "getVoted"
      });
      hasPermission(req, res, next, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return errRes = arguments[1];
          };
        })(),
        lineno: 68
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return errRes;
      }
      return getLinkType(req, res, next, Constants.REL_VOTED);
    });
  };

  exports.getCommented = function(req, res, next) {
    var err, errRes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "user.coffee",
        funcname: "getCommented"
      });
      hasPermission(req, res, next, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return errRes = arguments[1];
          };
        })(),
        lineno: 74
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return errRes;
      }
      return getLinkType(req, res, next, Constants.REL_COMMENTED);
    });
  };

}).call(this);
