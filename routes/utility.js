// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Attribute, Constants, Entity, Link, Response, StdSchema, Tag, User, db, getStartEndIndex, iced, isAdmin, redis, __iced_k, __iced_k_noop, _und;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  _und = require('underscore');

  StdSchema = require('../models/stdSchema');

  Constants = StdSchema.Constants;

  Response = StdSchema;

  User = require('../models/user');

  Entity = require('../models/entity');

  Attribute = require('../models/attribute');

  Tag = require('../models/tag');

  Link = require('../models/link');

  db = require('../models/setup').db;

  redis = require('../models/setup').db.redis;


  /*
  # Construct key
  */

  exports.getStartEndIndex = getStartEndIndex = function(start, rel, end) {
    return "" + start + "_" + rel + "_" + end;
  };


  /*
  # Finds the attribute given entity object
  */

  exports.getEntityAttributes = function(entity, cb) {
    var attrBlobs, blob, err, ind, linkData, node, nodes, rels, startendVal, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    rels = [];
    attrBlobs = [];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "utility.coffee",
        funcname: "getEntityAttributes"
      });
      entity._node.getRelationshipNodes({
        type: Constants.REL_ATTRIBUTE,
        direction: 'in'
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return nodes = arguments[1];
          };
        })(),
        lineno: 30
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return err;
      }
      (function(__iced_k) {
        var _i, _len;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "utility.coffee",
          funcname: "getEntityAttributes"
        });
        for (ind = _i = 0, _len = nodes.length; _i < _len; ind = ++_i) {
          node = nodes[ind];
          startendVal = getStartEndIndex(node.id, Constants.REL_ATTRIBUTE, entity._node.id);
          Link.find('startend', startendVal, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                err = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(rels, ind),
            lineno: 40
          }));
          (new Attribute(node)).serialize(__iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(attrBlobs, ind),
            lineno: 41
          }), entity._node.id);
        }
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len;
        for (ind = _i = 0, _len = attrBlobs.length; _i < _len; ind = ++_i) {
          blob = attrBlobs[ind];
          if (rels[ind]) {
            linkData = {
              linkData: rels[ind].serialize()
            };
          } else {
            linkData = {
              linkData: {}
            };
          }
          _und.extend(blob, linkData);
        }
        console.log(attrBlobs);
        return cb(attrBlobs);
      });
    });
  };


  /*
  # Reads http header to get access token
  # Exchange this token for a user unique identifier
  # then return the raw neo4j node of the user
  */

  exports.getUser = function(req, cb) {
    var accessToken, err, neoUserId, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    accessToken = (_ref = req.header['ACCESS_TOKEN']) != null ? _ref : "none";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "utility.coffee",
        funcname: "getUser"
      });
      redis.get(accessToken, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return neoUserId = arguments[1];
          };
        })(),
        lineno: 64
      }));
      __iced_deferrals._fulfill();
    })(function() {
      err = user = null;
      if (!neoUserId) {
        return cb(null, null);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "utility.coffee",
          funcname: "getUser"
        });
        User.get(neoUserId, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return user = arguments[1];
            };
          })(),
          lineno: 71
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log("Utility.getUser " + user);
        if (err) {
          cb(err, null);
        }
        return cb(null, user);
      });
    });
  };


  /*
  # Checks if a particular link type exists between the two node
  */

  exports.hasLink = function(startNode, otherNode, linkType, dir) {
    var err, path, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (dir == null) {
      dir = "all";
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "utility.coffee",
        funcname: "hasLink"
      });
      startNode.path(otherNode, linkType, dir, 1, 'shortestPath', __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return path = arguments[1];
          };
        })(),
        lineno: 89
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        throw "Unable to retrieve info";
      }
      if (path) {
        return path;
      } else {
        return false;
      }
    });
  };


  /*
  # Permission Related Stuff
  */

  exports.isAdmin = isAdmin = function(accessToken, cb) {
    return redis.sismember("superToken", accessToken, function(err, res) {
      return cb(err, res);
    });
  };


  /*
  # Internal API for creating userNode
  */

  exports.createUser = function(req, cb) {
    var accessToken, userToken;
    accessToken = req.header['ACCESS_TOKEN'];
    userToken = req.body.userToken;
    return isAdmin(accessToken, function(err, isSuperAwesome) {
      var err, user, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (isSuperAwesome) {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "utility.coffee"
          });
          User.create(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return user = arguments[1];
              };
            })(),
            lineno: 114
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            res.json({
              error: err
            });
          }
          return __iced_k(res.json(user.serialize()));
        });
      } else {
        return __iced_k(res.status(403).json({
          error: "Permission Denied"
        }));
      }
    });
  };

}).call(this);
