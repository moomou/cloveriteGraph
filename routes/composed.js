// Generated by IcedCoffeeScript 1.6.3-e
(function() {
  var Composed, Constants, Cypher, CypherBuilder, CypherLinkUtil, Entity, ErrorDevMessage, Link, Neo, Response, SchemaUtil, Tag, iced, __iced_k, __iced_k_noop, _create, _del, _show, _und, _update;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  require('source-map-support').install();

  _und = require('underscore');

  Neo = require('../models/neo');

  Entity = require('../models/entity');

  Composed = require('../models/composed');

  Tag = require('../models/tag');

  Link = require('../models/link');

  Cypher = require('./cypher');

  CypherBuilder = Cypher.CypherBuilder;

  CypherLinkUtil = Cypher.CypherLinkUtil;

  SchemaUtil = require('../models/stdSchema');

  Constants = SchemaUtil.Constants;

  Response = require('./response');

  ErrorDevMessage = Response.ErrorDevMessage;

  _create = function(req, res, next) {
    var composed, entityId, entityObj, entityObjs, err, errs, ind, linkData, pathExists, tagName, tagObj, tagObjs, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "composed.coffee",
        funcname: "_create"
      });
      Composed.create(req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return composed = arguments[1];
          };
        })(),
        lineno: 24
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      errs = [];
      tagObjs = [];
      entityObjs = [];
      (function(__iced_k) {
        var _i, _j, _len, _len1, _ref, _ref1;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "composed.coffee",
          funcname: "_create"
        });
        _ref = composed.serialize().tags;
        for (ind = _i = 0, _len = _ref.length; _i < _len; ind = ++_i) {
          tagName = _ref[ind];
          console.log(tagName);
          Tag.getOrCreate(tagName, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
              return function() {
                __slot_1[__slot_2] = arguments[0];
                return __slot_3[__slot_4] = arguments[1];
              };
            })(errs, ind, tagObjs, ind),
            lineno: 34
          }));
        }
        _ref1 = composed.serialize().entityId;
        for (ind = _j = 0, _len1 = _ref1.length; _j < _len1; ind = ++_j) {
          entityId = _ref1[ind];
          console.log(entityId);
          Entity.get(entityId, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                __iced_deferrals.ret = arguments[0];
                return __slot_1[__slot_2] = arguments[1];
              };
            })(entityObjs, ind),
            lineno: 37
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        err = _und.find(errs, function(err) {
          return err;
        }) || err;
        if (err) {
          return next(err);
        }
        linkData = Link.fillMetaData({});
        (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = tagObjs;
          _len = _ref.length;
          ind = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++ind;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(ind < _len)) {
              return _break();
            } else {
              tagObj = _ref[ind];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "composed.coffee",
                  funcname: "_create"
                });
                CypherLinkUtil.hasLink(tagObj._node, composed._node, Constants.REL_ATTRIBUTE, "all", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return pathExists = arguments[1];
                    };
                  })(),
                  lineno: 49
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(!pathExists ? CypherLinkUtil.createLink(tagObj._node, composed._node, Constants.REL_TAG, linkData, function(err, rel) {}) : void 0);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          var _i, _len;
          for (ind = _i = 0, _len = entityObjs.length; _i < _len; ind = ++_i) {
            entityObj = entityObjs[ind];
            CypherLinkUtil.createLink(entityObj._node, composed._node, Constants.REL_CONTAINER, {}, function(err, rel) {});
          }
          return Response.OKResponse(res)(200, composed.serialize());
        });
      });
    });
  };

  exports.create = _create;

  _show = function(req, res, next) {
    var composed, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "composed.coffee",
        funcname: "_show"
      });
      Composed.get(req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return composed = arguments[1];
          };
        })(),
        lineno: 70
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      return Response.OKResponse(res)(200, composed.serialize());
    });
  };

  exports.show = _show;

  _update = function(req, res, next) {
    var composed, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "composed.coffee",
        funcname: "_update"
      });
      Composed.update(req.params.id, req.body, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return composed = arguments[1];
          };
        })(),
        lineno: 78
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        if (err.dbError) {
          return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
        }
        if (err.validationError) {
          return Response.ErrorResponse(res)(400, err.validationError);
        }
      }
      return Response.OKResponse(res)(200, composed.serialize());
    });
  };

  exports.update = _update;

  _del = function(req, res, next) {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "composed.coffee",
        funcname: "_del"
      });
      Composed["delete"](req.params.id, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return __iced_deferrals.ret = arguments[1];
          };
        })(),
        lineno: 90
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (err) {
        return Response.ErrorResponse(res)(500, ErrorDevMessage.dbIssue());
      }
      return Response.OKResponse(res)(204);
    });
  };

  exports.del = _del;

  exports.getRelated = function(req, res, next) {
    return res.status(503).json({
      error: "Not Implemented"
    });
  };

}).call(this);
